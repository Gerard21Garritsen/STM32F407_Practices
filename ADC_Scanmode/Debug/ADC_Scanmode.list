
ADC_Scanmode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006778  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08006908  08006908  00016908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc4  08006cc4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ccc  08006ccc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002a8  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000095fd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a68  00000000  00000000  00029844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000878  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000673  00000000  00000000  0002bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002236d  00000000  00000000  0002c19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a485  00000000  00000000  0004e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d10c9  00000000  00000000  0005898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000336c  00000000  00000000  00129a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0012cdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068f0 	.word	0x080068f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080068f0 	.word	0x080068f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b08a      	sub	sp, #40	; 0x28
 8000f4e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fc92 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f886 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f9a0 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 f984 	bl	8001268 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f60:	f000 f8ea 	bl	8001138 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f64:	f000 f956 	bl	8001214 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //configure pin PB11 as Analog Input, cause we don't use it
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Pin = GPIO_PIN_11;
 8000f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4833      	ldr	r0, [pc, #204]	; (8001048 <main+0x100>)
 8000f7c:	f001 fbcc 	bl	8002718 <HAL_GPIO_Init>

  //Set up ADC with memory array and begin conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_values, ADC_CNV);
 8000f80:	2203      	movs	r2, #3
 8000f82:	4932      	ldr	r1, [pc, #200]	; (800104c <main+0x104>)
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <main+0x108>)
 8000f86:	f000 fd2d 	bl	80019e4 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //we get ADC conversions from ADC an turn to voltages

	  for(uint8_t i = 0; i < 3; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]
 8000f8e:	e023      	b.n	8000fd8 <main+0x90>
	  {
		  adc_voltages[i] = (adc_values[i] * 3.3 ) / 4095;
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <main+0x104>)
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fac3 	bl	8000524 <__aeabi_i2d>
 8000f9e:	a326      	add	r3, pc, #152	; (adr r3, 8001038 <main+0xf0>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb28 	bl	80005f8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	a323      	add	r3, pc, #140	; (adr r3, 8001040 <main+0xf8>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fc49 	bl	800084c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	7dfc      	ldrb	r4, [r7, #23]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdf0 	bl	8000ba8 <__aeabi_d2f>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4922      	ldr	r1, [pc, #136]	; (8001054 <main+0x10c>)
 8000fcc:	00a3      	lsls	r3, r4, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < 3; i++)
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	75fb      	strb	r3, [r7, #23]
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d9d8      	bls.n	8000f90 <main+0x48>

	  }

	  //send trough USART3 ADC data
	  sprintf(adc_cadena, "Voltage CH1: %.3f, CH2 %.3f, CH3: %.3f\r\n", adc_voltages[0], adc_voltages[1], adc_voltages[2]);
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <main+0x10c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fab0 	bl	8000548 <__aeabi_f2d>
 8000fe8:	4680      	mov	r8, r0
 8000fea:	4689      	mov	r9, r1
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <main+0x10c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff faa9 	bl	8000548 <__aeabi_f2d>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	460d      	mov	r5, r1
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <main+0x10c>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff faa2 	bl	8000548 <__aeabi_f2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800100c:	e9cd 4500 	strd	r4, r5, [sp]
 8001010:	4642      	mov	r2, r8
 8001012:	464b      	mov	r3, r9
 8001014:	4910      	ldr	r1, [pc, #64]	; (8001058 <main+0x110>)
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <main+0x114>)
 8001018:	f003 fb0c 	bl	8004634 <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t*)&adc_cadena, strlen(adc_cadena), 50);
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <main+0x114>)
 800101e:	f7ff f927 	bl	8000270 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	2332      	movs	r3, #50	; 0x32
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <main+0x114>)
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <main+0x118>)
 800102c:	f002 fa1f 	bl	800346e <HAL_UART_Transmit>
	  for(uint8_t i = 0; i < 3; i++)
 8001030:	e7ab      	b.n	8000f8a <main+0x42>
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	66666666 	.word	0x66666666
 800103c:	400a6666 	.word	0x400a6666
 8001040:	00000000 	.word	0x00000000
 8001044:	40affe00 	.word	0x40affe00
 8001048:	40020400 	.word	0x40020400
 800104c:	200002e0 	.word	0x200002e0
 8001050:	200001f0 	.word	0x200001f0
 8001054:	200002e8 	.word	0x200002e8
 8001058:	08006908 	.word	0x08006908
 800105c:	200002f4 	.word	0x200002f4
 8001060:	20000298 	.word	0x20000298

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fb41 	bl	80046fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SystemClock_Config+0xcc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <SystemClock_Config+0xd0>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d4:	2308      	movs	r3, #8
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010d8:	23c0      	movs	r3, #192	; 0xc0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80010dc:	2308      	movs	r3, #8
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fcb1 	bl	8002a50 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f4:	f000 f982 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff14 	bl	8002f40 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800111e:	f000 f96d 	bl	80013fc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001122:	f001 fff3 	bl	800310c <HAL_RCC_EnableCSS>
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <MX_ADC1_Init+0xd0>)
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <MX_ADC1_Init+0xd4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_ADC1_Init+0xd0>)
 800115e:	2201      	movs	r2, #1
 8001160:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_ADC1_Init+0xd0>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <MX_ADC1_Init+0xd8>)
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_ADC1_Init+0xd0>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001184:	2203      	movs	r2, #3
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC1_Init+0xd0>)
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001192:	2201      	movs	r2, #1
 8001194:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_ADC1_Init+0xd0>)
 8001198:	f000 fbe0 	bl	800195c <HAL_ADC_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f92b 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_ADC1_Init+0xd0>)
 80011b8:	f000 fd42 	bl	8001c40 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 f91b 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC1_Init+0xd0>)
 80011d4:	f000 fd34 	bl	8001c40 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011de:	f000 f90d 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011e2:	2303      	movs	r3, #3
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011e6:	2303      	movs	r3, #3
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC1_Init+0xd0>)
 80011f0:	f000 fd26 	bl	8001c40 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011fa:	f000 f8ff 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f0 	.word	0x200001f0
 800120c:	40012000 	.word	0x40012000
 8001210:	0f000001 	.word	0x0f000001

08001214 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART3_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 8001220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 800123a:	2208      	movs	r2, #8
 800123c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART3_UART_Init+0x4c>)
 800124c:	f002 f8bf 	bl	80033ce <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f8d1 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000298 	.word	0x20000298
 8001264:	40004800 	.word	0x40004800

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x30>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <MX_DMA_Init+0x30>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_DMA_Init+0x30>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3c      	ldr	r2, [pc, #240]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <MX_GPIO_Init+0x148>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <MX_GPIO_Init+0x148>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a35      	ldr	r2, [pc, #212]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2e      	ldr	r2, [pc, #184]	; (80013e4 <MX_GPIO_Init+0x148>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800135a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <MX_GPIO_Init+0x14c>)
 8001370:	f001 f9d2 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001378:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <MX_GPIO_Init+0x150>)
 800138a:	f001 f9c5 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800138e:	f649 73f1 	movw	r3, #40945	; 0x9ff1
 8001392:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_GPIO_Init+0x154>)
 80013a4:	f001 f9b8 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013a8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80013ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x158>)
 80013be:	f001 f9ab 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80013c2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80013c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <MX_GPIO_Init+0x15c>)
 80013d8:	f001 f99e 	bl	8002718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013dc:	bf00      	nop
 80013de:	3730      	adds	r7, #48	; 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020c00 	.word	0x40020c00

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_ADC_MspInit+0xdc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d157      	bne.n	800152a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_ADC_MspInit+0xe0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230e      	movs	r3, #14
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	2303      	movs	r3, #3
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	481d      	ldr	r0, [pc, #116]	; (800153c <HAL_ADC_MspInit+0xe4>)
 80014c6:	f001 f927 	bl	8002718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_ADC_MspInit+0xec>)
 80014ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 80014fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001500:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 8001510:	f000 ff1c 	bl	800234c <HAL_DMA_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800151a:	f7ff ff6f 	bl	80013fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_ADC_MspInit+0xe8>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40012000 	.word	0x40012000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	20000238 	.word	0x20000238
 8001544:	40026470 	.word	0x40026470

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_UART_MspInit+0xc4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d14b      	bne.n	8001602 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_UART_MspInit+0xc8>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_UART_MspInit+0xc8>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_UART_MspInit+0xc8>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_UART_MspInit+0xc8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_UART_MspInit+0xc8>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_UART_MspInit+0xc8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_UART_MspInit+0xc8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_UART_MspInit+0xc8>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_MspInit+0xc8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d0:	2307      	movs	r3, #7
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <HAL_UART_MspInit+0xcc>)
 80015dc:	f001 f89c 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f2:	2307      	movs	r3, #7
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_UART_MspInit+0xd0>)
 80015fe:	f001 f88b 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40004800 	.word	0x40004800
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400
 8001618:	40020c00 	.word	0x40020c00

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001620:	f001 feba 	bl	8003398 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x8>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f956 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_kill>:

int _kill(int pid, int sig)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800168e:	f003 f887 	bl	80047a0 <__errno>
 8001692:	4603      	mov	r3, r0
 8001694:	2216      	movs	r2, #22
 8001696:	601a      	str	r2, [r3, #0]
  return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_exit>:

void _exit (int status)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffe7 	bl	8001684 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016b6:	e7fe      	b.n	80016b6 <_exit+0x12>

080016b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00a      	b.n	80016e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ca:	f3af 8000 	nop.w
 80016ce:	4601      	mov	r1, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <_read+0x12>
  }

  return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e009      	b.n	8001718 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf1      	blt.n	8001704 <_write+0x12>
  }
  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_close>:

int _close(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001752:	605a      	str	r2, [r3, #4]
  return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_isatty>:

int _isatty(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f002 ffec 	bl	80047a0 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20020000 	.word	0x20020000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	20000328 	.word	0x20000328
 80017fc:	20000480 	.word	0x20000480

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001828:	f7ff ffea 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001852:	f002 ffab 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fb77 	bl	8000f48 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001868:	08006cd4 	.word	0x08006cd4
  ldr r2, =_sbss
 800186c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001870:	2000047c 	.word	0x2000047c

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 fd1f 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fdac 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fd29 	bl	8002332 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f000 fcff 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000000 	.word	0x20000000
 8001914:	20000008 	.word	0x20000008
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	2000032c 	.word	0x2000032c

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000032c 	.word	0x2000032c

0800195c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e033      	b.n	80019da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd6c 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa68 	bl	8001e84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Start_DMA+0x1e>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e0e9      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x1f2>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d018      	beq.n	8001a4a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a28:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_ADC_Start_DMA+0x1fc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6d      	ldr	r2, [pc, #436]	; (8001be4 <HAL_ADC_Start_DMA+0x200>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9a      	lsrs	r2, r3, #18
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a3c:	e002      	b.n	8001a44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f9      	bne.n	8001a3e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a58:	d107      	bne.n	8001a6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a68:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 80a1 	bne.w	8001bbc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f023 0206 	bic.w	r2, r3, #6
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac6:	e002      	b.n	8001ace <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_ADC_Start_DMA+0x204>)
 8001ad8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_ADC_Start_DMA+0x208>)
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_ADC_Start_DMA+0x20c>)
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_ADC_Start_DMA+0x210>)
 8001af0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001afa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b1a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	334c      	adds	r3, #76	; 0x4c
 8001b26:	4619      	mov	r1, r3
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f000 fcbc 	bl	80024a8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d12a      	bne.n	8001b92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_ADC_Start_DMA+0x214>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d015      	beq.n	8001b72 <HAL_ADC_Start_DMA+0x18e>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <HAL_ADC_Start_DMA+0x218>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_Start_DMA+0x178>
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_ADC_Start_DMA+0x204>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_ADC_Start_DMA+0x21c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d136      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_ADC_Start_DMA+0x204>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d130      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d129      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e020      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_ADC_Start_DMA+0x214>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d114      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	e00b      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	40012300 	.word	0x40012300
 8001bec:	0800207d 	.word	0x0800207d
 8001bf0:	08002137 	.word	0x08002137
 8001bf4:	08002153 	.word	0x08002153
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	40012100 	.word	0x40012100
 8001c00:	40012200 	.word	0x40012200

08001c04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1c>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e105      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x228>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d925      	bls.n	8001cb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68d9      	ldr	r1, [r3, #12]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b1e      	subs	r3, #30
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4403      	add	r3, r0
 8001caa:	3b1e      	subs	r3, #30
 8001cac:	409a      	lsls	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	e022      	b.n	8001cfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6919      	ldr	r1, [r3, #16]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	2207      	movs	r2, #7
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4403      	add	r3, r0
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d824      	bhi.n	8001d50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3b05      	subs	r3, #5
 8001d18:	221f      	movs	r2, #31
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	400a      	ands	r2, r1
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b05      	subs	r3, #5
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d4e:	e04c      	b.n	8001dea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d824      	bhi.n	8001da2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b23      	subs	r3, #35	; 0x23
 8001d6a:	221f      	movs	r2, #31
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43da      	mvns	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	400a      	ands	r2, r1
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b23      	subs	r3, #35	; 0x23
 8001d94:	fa00 f203 	lsl.w	r2, r0, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001da0:	e023      	b.n	8001dea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b41      	subs	r3, #65	; 0x41
 8001db4:	221f      	movs	r2, #31
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b41      	subs	r3, #65	; 0x41
 8001dde:	fa00 f203 	lsl.w	r2, r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_ADC_ConfigChannel+0x234>)
 8001dec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_ADC_ConfigChannel+0x238>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d109      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1cc>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_ADC_ConfigChannel+0x238>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d123      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x21e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d003      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x1e6>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d11b      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_ADC_ConfigChannel+0x23c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_ADC_ConfigChannel+0x240>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9a      	lsrs	r2, r3, #18
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40012300 	.word	0x40012300
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83

08001e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <ADC_Init+0x1f0>)
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	021a      	lsls	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	4a58      	ldr	r2, [pc, #352]	; (8002078 <ADC_Init+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e00f      	b.n	8001f82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0202 	bic.w	r2, r2, #2
 8001f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
 8001f9c:	005a      	lsls	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	035a      	lsls	r2, r3, #13
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e007      	b.n	8001ff8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	3b01      	subs	r3, #1
 8002014:	051a      	lsls	r2, r3, #20
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800203a:	025a      	lsls	r2, r3, #9
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	029a      	lsls	r2, r3, #10
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40012300 	.word	0x40012300
 8002078:	0f000001 	.word	0x0f000001

0800207c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002092:	2b00      	cmp	r3, #0
 8002094:	d13c      	bne.n	8002110 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d12b      	bne.n	8002108 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d127      	bne.n	8002108 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d119      	bne.n	8002108 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0220 	bic.w	r2, r2, #32
 80020e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fd7b 	bl	8001c04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800210e:	e00e      	b.n	800212e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fd85 	bl	8001c2c <HAL_ADC_ErrorCallback>
}
 8002122:	e004      	b.n	800212e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fd67 	bl	8001c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f043 0204 	orr.w	r2, r3, #4
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fd5a 	bl	8001c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff47 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff5c 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffb0 	bl	80022a0 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff faf4 	bl	8001944 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e099      	b.n	800249c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	e00f      	b.n	80023aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238a:	f7ff fadb 	bl	8001944 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b05      	cmp	r3, #5
 8002396:	d908      	bls.n	80023aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e078      	b.n	800249c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e8      	bne.n	800238a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_DMA_Init+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b04      	cmp	r3, #4
 800243c:	d117      	bne.n	800246e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8e5 	bl	8002620 <DMA_CheckFifoParam>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f89c 	bl	80025b4 <DMA_CalcBaseAndBitshift>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f010803f 	.word	0xf010803f

080024a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Start_IT+0x26>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e040      	b.n	8002550 <HAL_DMA_Start_IT+0xa8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12f      	bne.n	8002542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f82e 	bl	8002558 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0216 	orr.w	r2, r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002574:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d108      	bne.n	8002598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002596:	e007      	b.n	80025a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	60da      	str	r2, [r3, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3b10      	subs	r3, #16
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <DMA_CalcBaseAndBitshift+0x64>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <DMA_CalcBaseAndBitshift+0x68>)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d909      	bls.n	80025f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	1d1a      	adds	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	; 0x58
 80025f4:	e007      	b.n	8002606 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	aaaaaaab 	.word	0xaaaaaaab
 800261c:	0800694c 	.word	0x0800694c

08002620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d11f      	bne.n	800267a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d856      	bhi.n	80026ee <DMA_CheckFifoParam+0xce>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <DMA_CheckFifoParam+0x28>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	08002659 	.word	0x08002659
 800264c:	0800266b 	.word	0x0800266b
 8002650:	08002659 	.word	0x08002659
 8002654:	080026ef 	.word	0x080026ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d046      	beq.n	80026f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e043      	b.n	80026f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002672:	d140      	bne.n	80026f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e03d      	b.n	80026f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002682:	d121      	bne.n	80026c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d837      	bhi.n	80026fa <DMA_CheckFifoParam+0xda>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <DMA_CheckFifoParam+0x70>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026a7 	.word	0x080026a7
 8002698:	080026a1 	.word	0x080026a1
 800269c:	080026b9 	.word	0x080026b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e030      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d025      	beq.n	80026fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b6:	e022      	b.n	80026fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c0:	d11f      	bne.n	8002702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026c6:	e01c      	b.n	8002702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d903      	bls.n	80026d6 <DMA_CheckFifoParam+0xb6>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d003      	beq.n	80026dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026d4:	e018      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      break;
 80026da:	e015      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00e      	beq.n	8002706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e00b      	b.n	8002706 <DMA_CheckFifoParam+0xe6>
      break;
 80026ee:	bf00      	nop
 80026f0:	e00a      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
 80026f4:	e008      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;
 80026f6:	bf00      	nop
 80026f8:	e006      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e004      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;
 80026fe:	bf00      	nop
 8002700:	e002      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;   
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
    }
  } 
  
  return status; 
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e16b      	b.n	8002a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	f040 815a 	bne.w	8002a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d005      	beq.n	800276a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002766:	2b02      	cmp	r3, #2
 8002768:	d130      	bne.n	80027cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0201 	and.w	r2, r3, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d017      	beq.n	8002808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d123      	bne.n	800285c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80b4 	beq.w	8002a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_GPIO_Init+0x30c>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a5f      	ldr	r2, [pc, #380]	; (8002a24 <HAL_GPIO_Init+0x30c>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_GPIO_Init+0x30c>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ba:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <HAL_GPIO_Init+0x310>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_GPIO_Init+0x314>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x226>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <HAL_GPIO_Init+0x318>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x222>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_GPIO_Init+0x31c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x21a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_GPIO_Init+0x324>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x216>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_GPIO_Init+0x328>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x212>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_GPIO_Init+0x330>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x20a>
 800291e:	2307      	movs	r3, #7
 8002920:	e00e      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002922:	2308      	movs	r3, #8
 8002924:	e00c      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002926:	2306      	movs	r3, #6
 8002928:	e00a      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800292e:	2304      	movs	r3, #4
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800293e:	2300      	movs	r3, #0
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f002 0203 	and.w	r2, r2, #3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x310>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_GPIO_Init+0x334>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002982:	4a32      	ldr	r2, [pc, #200]	; (8002a4c <HAL_GPIO_Init+0x334>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_GPIO_Init+0x334>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_GPIO_Init+0x334>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f ae90 	bls.w	8002734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff1c 	bl	8001944 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe ff18 	bl	8001944 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe ff08 	bl	8001944 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff04 	bl	8001944 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe febd 	bl	8001944 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe feb9 	bl	8001944 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe9c 	bl	8001944 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fe98 	bl	8001944 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fe7c 	bl	8001944 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fe78 	bl	8001944 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fe65 	bl	8001944 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fe61 	bl	8001944 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe21 	bl	8001944 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe fe1d 	bl	8001944 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fde2 	bl	8001944 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fdde 	bl	8001944 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe fdcc 	bl	8001944 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fdc8 	bl	8001944 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fd9c 	bl	8001944 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fd98 	bl	8001944 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fd71 	bl	8001944 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe fd6d 	bl	8001944 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fd5a 	bl	8001944 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fd56 	bl	8001944 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fc88 	bl	8001944 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fc84 	bl	8001944 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f82d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fbe8 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08006934 	.word	0x08006934
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_EnableCSS+0x14>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	4247004c 	.word	0x4247004c

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b094      	sub	sp, #80	; 0x50
 800312a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
 8003130:	2300      	movs	r3, #0
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003134:	2300      	movs	r3, #0
 8003136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	4b79      	ldr	r3, [pc, #484]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d00d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 8003148:	2b08      	cmp	r3, #8
 800314a:	f200 80e1 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 8003152:	2b04      	cmp	r3, #4
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x3a>
 8003156:	e0db      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_GetSysClockFreq+0x204>)
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800315c:	e0db      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCC_GetSysClockFreq+0x208>)
 8003160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003162:	e0d8      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316e:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	2200      	movs	r2, #0
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
 8003184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
 800318e:	2300      	movs	r3, #0
 8003190:	637b      	str	r3, [r7, #52]	; 0x34
 8003192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003196:	4622      	mov	r2, r4
 8003198:	462b      	mov	r3, r5
 800319a:	f04f 0000 	mov.w	r0, #0
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	0159      	lsls	r1, r3, #5
 80031a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a8:	0150      	lsls	r0, r2, #5
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4621      	mov	r1, r4
 80031b0:	1a51      	subs	r1, r2, r1
 80031b2:	6139      	str	r1, [r7, #16]
 80031b4:	4629      	mov	r1, r5
 80031b6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c8:	4659      	mov	r1, fp
 80031ca:	018b      	lsls	r3, r1, #6
 80031cc:	4651      	mov	r1, sl
 80031ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d2:	4651      	mov	r1, sl
 80031d4:	018a      	lsls	r2, r1, #6
 80031d6:	4651      	mov	r1, sl
 80031d8:	ebb2 0801 	subs.w	r8, r2, r1
 80031dc:	4659      	mov	r1, fp
 80031de:	eb63 0901 	sbc.w	r9, r3, r1
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f6:	4690      	mov	r8, r2
 80031f8:	4699      	mov	r9, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	eb18 0303 	adds.w	r3, r8, r3
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	462b      	mov	r3, r5
 8003204:	eb49 0303 	adc.w	r3, r9, r3
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003216:	4629      	mov	r1, r5
 8003218:	024b      	lsls	r3, r1, #9
 800321a:	4621      	mov	r1, r4
 800321c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003220:	4621      	mov	r1, r4
 8003222:	024a      	lsls	r2, r1, #9
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	2200      	movs	r2, #0
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
 800322e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003234:	f7fd fd08 	bl	8000c48 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	e058      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	2200      	movs	r2, #0
 800324a:	4618      	mov	r0, r3
 800324c:	4611      	mov	r1, r2
 800324e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
 8003258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0159      	lsls	r1, r3, #5
 800326a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326e:	0150      	lsls	r0, r2, #5
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4641      	mov	r1, r8
 8003276:	ebb2 0a01 	subs.w	sl, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800328c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003294:	ebb2 040a 	subs.w	r4, r2, sl
 8003298:	eb63 050b 	sbc.w	r5, r3, fp
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	00eb      	lsls	r3, r5, #3
 80032a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032aa:	00e2      	lsls	r2, r4, #3
 80032ac:	4614      	mov	r4, r2
 80032ae:	461d      	mov	r5, r3
 80032b0:	4643      	mov	r3, r8
 80032b2:	18e3      	adds	r3, r4, r3
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	464b      	mov	r3, r9
 80032b8:	eb45 0303 	adc.w	r3, r5, r3
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ca:	4629      	mov	r1, r5
 80032cc:	028b      	lsls	r3, r1, #10
 80032ce:	4621      	mov	r1, r4
 80032d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d4:	4621      	mov	r1, r4
 80032d6:	028a      	lsls	r2, r1, #10
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	2200      	movs	r2, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	61fa      	str	r2, [r7, #28]
 80032e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e8:	f7fd fcae 	bl	8000c48 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetSysClockFreq+0x204>)
 8003312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003318:	4618      	mov	r0, r3
 800331a:	3750      	adds	r7, #80	; 0x50
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	00f42400 	.word	0x00f42400
 800332c:	007a1200 	.word	0x007a1200

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCC_GetHCLKFreq+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000000 	.word	0x20000000

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800334c:	f7ff fff0 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0a9b      	lsrs	r3, r3, #10
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	08006944 	.word	0x08006944

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003374:	f7ff ffdc 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0b5b      	lsrs	r3, r3, #13
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	08006944 	.word	0x08006944

08003398 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d104      	bne.n	80033b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80033a8:	f000 f80a 	bl	80033c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	701a      	strb	r2, [r3, #0]
  }
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	4002380e 	.word	0x4002380e

080033c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e042      	b.n	8003466 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe f8a7 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2224      	movs	r2, #36	; 0x24
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003410:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f972 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003426:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003436:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b08a      	sub	sp, #40	; 0x28
 8003472:	af02      	add	r7, sp, #8
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	d175      	bne.n	800357a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_UART_Transmit+0x2c>
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06e      	b.n	800357c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2221      	movs	r2, #33	; 0x21
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fa4a 	bl	8001944 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d108      	bne.n	80034da <HAL_UART_Transmit+0x6c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e003      	b.n	80034e2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034e2:	e02e      	b.n	8003542 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f848 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e03a      	b.n	800357c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	3302      	adds	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e007      	b.n	8003534 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1cb      	bne.n	80034e4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f814 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e006      	b.n	800357c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	e03b      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359c:	d037      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fe f9d1 	bl	8001944 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e03a      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d023      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d020      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d01d      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d116      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f81d 	bl	8003636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2208      	movs	r2, #8
 8003600:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d0b4      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003636:	b480      	push	{r7}
 8003638:	b095      	sub	sp, #84	; 0x54
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365e:	643a      	str	r2, [r7, #64]	; 0x40
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	61fb      	str	r3, [r7, #28]
   return(result);
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e5      	bne.n	8003672 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d119      	bne.n	80036e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036ce:	61ba      	str	r2, [r7, #24]
 80036d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	613b      	str	r3, [r7, #16]
   return(result);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036f0:	bf00      	nop
 80036f2:	3754      	adds	r7, #84	; 0x54
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b0c0      	sub	sp, #256	; 0x100
 8003702:	af00      	add	r7, sp, #0
 8003704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	ea40 0301 	orr.w	r3, r0, r1
 8003724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	431a      	orrs	r2, r3
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003754:	f021 010c 	bic.w	r1, r1, #12
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003762:	430b      	orrs	r3, r1
 8003764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	6999      	ldr	r1, [r3, #24]
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	ea40 0301 	orr.w	r3, r0, r1
 8003782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <UART_SetConfig+0x2cc>)
 800378c:	429a      	cmp	r2, r3
 800378e:	d005      	beq.n	800379c <UART_SetConfig+0xa0>
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <UART_SetConfig+0x2d0>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d104      	bne.n	80037a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff fde8 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 80037a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037a4:	e003      	b.n	80037ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037a6:	f7ff fdcf 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 80037aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	f040 810c 	bne.w	80039d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ce:	4622      	mov	r2, r4
 80037d0:	462b      	mov	r3, r5
 80037d2:	1891      	adds	r1, r2, r2
 80037d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037d6:	415b      	adcs	r3, r3
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037de:	4621      	mov	r1, r4
 80037e0:	eb12 0801 	adds.w	r8, r2, r1
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb43 0901 	adc.w	r9, r3, r1
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fe:	4690      	mov	r8, r2
 8003800:	4699      	mov	r9, r3
 8003802:	4623      	mov	r3, r4
 8003804:	eb18 0303 	adds.w	r3, r8, r3
 8003808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800380c:	462b      	mov	r3, r5
 800380e:	eb49 0303 	adc.w	r3, r9, r3
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800382a:	460b      	mov	r3, r1
 800382c:	18db      	adds	r3, r3, r3
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
 8003830:	4613      	mov	r3, r2
 8003832:	eb42 0303 	adc.w	r3, r2, r3
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
 8003838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800383c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003840:	f7fd fa02 	bl	8000c48 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <UART_SetConfig+0x2d4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800385c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	64b9      	str	r1, [r7, #72]	; 0x48
 800386c:	415b      	adcs	r3, r3
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003874:	4641      	mov	r1, r8
 8003876:	eb12 0a01 	adds.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb43 0b01 	adc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800388c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003894:	4692      	mov	sl, r2
 8003896:	469b      	mov	fp, r3
 8003898:	4643      	mov	r3, r8
 800389a:	eb1a 0303 	adds.w	r3, sl, r3
 800389e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a2:	464b      	mov	r3, r9
 80038a4:	eb4b 0303 	adc.w	r3, fp, r3
 80038a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038c0:	460b      	mov	r3, r1
 80038c2:	18db      	adds	r3, r3, r3
 80038c4:	643b      	str	r3, [r7, #64]	; 0x40
 80038c6:	4613      	mov	r3, r2
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038d6:	f7fd f9b7 	bl	8000c48 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2301 	umull	r2, r3, r3, r1
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2264      	movs	r2, #100	; 0x64
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038f8:	fba3 2302 	umull	r2, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003904:	441c      	add	r4, r3
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003920:	415b      	adcs	r3, r3
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6339      	str	r1, [r7, #48]	; 0x30
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800395c:	464b      	mov	r3, r9
 800395e:	460a      	mov	r2, r1
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800397c:	460b      	mov	r3, r1
 800397e:	18db      	adds	r3, r3, r3
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
 8003982:	4613      	mov	r3, r2
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003992:	f7fd f959 	bl	8000c48 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <UART_SetConfig+0x2d4>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <UART_SetConfig+0x2d4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4422      	add	r2, r4
 80039c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c4:	e106      	b.n	8003bd4 <UART_SetConfig+0x4d8>
 80039c6:	bf00      	nop
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40011400 	.word	0x40011400
 80039d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039e6:	4642      	mov	r2, r8
 80039e8:	464b      	mov	r3, r9
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	6239      	str	r1, [r7, #32]
 80039ee:	415b      	adcs	r3, r3
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039f6:	4641      	mov	r1, r8
 80039f8:	1854      	adds	r4, r2, r1
 80039fa:	4649      	mov	r1, r9
 80039fc:	eb43 0501 	adc.w	r5, r3, r1
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	00eb      	lsls	r3, r5, #3
 8003a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0e:	00e2      	lsls	r2, r4, #3
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	18e3      	adds	r3, r4, r3
 8003a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	eb45 0303 	adc.w	r3, r5, r3
 8003a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a42:	4629      	mov	r1, r5
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	008a      	lsls	r2, r1, #2
 8003a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a54:	f7fd f8f8 	bl	8000c48 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011c      	lsls	r4, r3, #4
 8003a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	61b9      	str	r1, [r7, #24]
 8003a80:	415b      	adcs	r3, r3
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	1851      	adds	r1, r2, r1
 8003a8c:	6139      	str	r1, [r7, #16]
 8003a8e:	4649      	mov	r1, r9
 8003a90:	414b      	adcs	r3, r1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	00cb      	lsls	r3, r1, #3
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aaa:	4651      	mov	r1, sl
 8003aac:	00ca      	lsls	r2, r1, #3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003abc:	464b      	mov	r3, r9
 8003abe:	460a      	mov	r2, r1
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	008b      	lsls	r3, r1, #2
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aea:	4641      	mov	r1, r8
 8003aec:	008a      	lsls	r2, r1, #2
 8003aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003af2:	f7fd f8a9 	bl	8000c48 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003afe:	fba3 2301 	umull	r2, r3, r3, r1
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2264      	movs	r2, #100	; 0x64
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	3332      	adds	r3, #50	; 0x32
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	441c      	add	r4, r3
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	673b      	str	r3, [r7, #112]	; 0x70
 8003b26:	677a      	str	r2, [r7, #116]	; 0x74
 8003b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	415b      	adcs	r3, r3
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	1851      	adds	r1, r2, r1
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	4649      	mov	r1, r9
 8003b44:	414b      	adcs	r3, r1
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b54:	4659      	mov	r1, fp
 8003b56:	00cb      	lsls	r3, r1, #3
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5e:	4651      	mov	r1, sl
 8003b60:	00ca      	lsls	r2, r1, #3
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b6e:	464b      	mov	r3, r9
 8003b70:	460a      	mov	r2, r1
 8003b72:	eb42 0303 	adc.w	r3, r2, r3
 8003b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	663b      	str	r3, [r7, #96]	; 0x60
 8003b82:	667a      	str	r2, [r7, #100]	; 0x64
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b90:	4649      	mov	r1, r9
 8003b92:	008b      	lsls	r3, r1, #2
 8003b94:	4641      	mov	r1, r8
 8003b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	008a      	lsls	r2, r1, #2
 8003b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ba2:	f7fd f851 	bl	8000c48 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	; 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	3332      	adds	r3, #50	; 0x32
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4422      	add	r2, r4
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be0:	51eb851f 	.word	0x51eb851f

08003be4 <__cvt>:
 8003be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	ec55 4b10 	vmov	r4, r5, d0
 8003bec:	2d00      	cmp	r5, #0
 8003bee:	460e      	mov	r6, r1
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	bfbb      	ittet	lt
 8003bf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003bfa:	461d      	movlt	r5, r3
 8003bfc:	2300      	movge	r3, #0
 8003bfe:	232d      	movlt	r3, #45	; 0x2d
 8003c00:	700b      	strb	r3, [r1, #0]
 8003c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003c08:	4691      	mov	r9, r2
 8003c0a:	f023 0820 	bic.w	r8, r3, #32
 8003c0e:	bfbc      	itt	lt
 8003c10:	4622      	movlt	r2, r4
 8003c12:	4614      	movlt	r4, r2
 8003c14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c18:	d005      	beq.n	8003c26 <__cvt+0x42>
 8003c1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c1e:	d100      	bne.n	8003c22 <__cvt+0x3e>
 8003c20:	3601      	adds	r6, #1
 8003c22:	2102      	movs	r1, #2
 8003c24:	e000      	b.n	8003c28 <__cvt+0x44>
 8003c26:	2103      	movs	r1, #3
 8003c28:	ab03      	add	r3, sp, #12
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	ab02      	add	r3, sp, #8
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	ec45 4b10 	vmov	d0, r4, r5
 8003c34:	4653      	mov	r3, sl
 8003c36:	4632      	mov	r2, r6
 8003c38:	f000 fe6a 	bl	8004910 <_dtoa_r>
 8003c3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c40:	4607      	mov	r7, r0
 8003c42:	d102      	bne.n	8003c4a <__cvt+0x66>
 8003c44:	f019 0f01 	tst.w	r9, #1
 8003c48:	d022      	beq.n	8003c90 <__cvt+0xac>
 8003c4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c4e:	eb07 0906 	add.w	r9, r7, r6
 8003c52:	d110      	bne.n	8003c76 <__cvt+0x92>
 8003c54:	783b      	ldrb	r3, [r7, #0]
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d10a      	bne.n	8003c70 <__cvt+0x8c>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f7fc ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c66:	b918      	cbnz	r0, 8003c70 <__cvt+0x8c>
 8003c68:	f1c6 0601 	rsb	r6, r6, #1
 8003c6c:	f8ca 6000 	str.w	r6, [sl]
 8003c70:	f8da 3000 	ldr.w	r3, [sl]
 8003c74:	4499      	add	r9, r3
 8003c76:	2200      	movs	r2, #0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f7fc ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c82:	b108      	cbz	r0, 8003c88 <__cvt+0xa4>
 8003c84:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c88:	2230      	movs	r2, #48	; 0x30
 8003c8a:	9b03      	ldr	r3, [sp, #12]
 8003c8c:	454b      	cmp	r3, r9
 8003c8e:	d307      	bcc.n	8003ca0 <__cvt+0xbc>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c94:	1bdb      	subs	r3, r3, r7
 8003c96:	4638      	mov	r0, r7
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	b004      	add	sp, #16
 8003c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca0:	1c59      	adds	r1, r3, #1
 8003ca2:	9103      	str	r1, [sp, #12]
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e7f0      	b.n	8003c8a <__cvt+0xa6>

08003ca8 <__exponent>:
 8003ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003caa:	4603      	mov	r3, r0
 8003cac:	2900      	cmp	r1, #0
 8003cae:	bfb8      	it	lt
 8003cb0:	4249      	neglt	r1, r1
 8003cb2:	f803 2b02 	strb.w	r2, [r3], #2
 8003cb6:	bfb4      	ite	lt
 8003cb8:	222d      	movlt	r2, #45	; 0x2d
 8003cba:	222b      	movge	r2, #43	; 0x2b
 8003cbc:	2909      	cmp	r1, #9
 8003cbe:	7042      	strb	r2, [r0, #1]
 8003cc0:	dd2a      	ble.n	8003d18 <__exponent+0x70>
 8003cc2:	f10d 0207 	add.w	r2, sp, #7
 8003cc6:	4617      	mov	r7, r2
 8003cc8:	260a      	movs	r6, #10
 8003cca:	4694      	mov	ip, r2
 8003ccc:	fb91 f5f6 	sdiv	r5, r1, r6
 8003cd0:	fb06 1415 	mls	r4, r6, r5, r1
 8003cd4:	3430      	adds	r4, #48	; 0x30
 8003cd6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003cda:	460c      	mov	r4, r1
 8003cdc:	2c63      	cmp	r4, #99	; 0x63
 8003cde:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	dcf1      	bgt.n	8003cca <__exponent+0x22>
 8003ce6:	3130      	adds	r1, #48	; 0x30
 8003ce8:	f1ac 0402 	sub.w	r4, ip, #2
 8003cec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003cf0:	1c41      	adds	r1, r0, #1
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	42ba      	cmp	r2, r7
 8003cf6:	d30a      	bcc.n	8003d0e <__exponent+0x66>
 8003cf8:	f10d 0209 	add.w	r2, sp, #9
 8003cfc:	eba2 020c 	sub.w	r2, r2, ip
 8003d00:	42bc      	cmp	r4, r7
 8003d02:	bf88      	it	hi
 8003d04:	2200      	movhi	r2, #0
 8003d06:	4413      	add	r3, r2
 8003d08:	1a18      	subs	r0, r3, r0
 8003d0a:	b003      	add	sp, #12
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d12:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003d16:	e7ed      	b.n	8003cf4 <__exponent+0x4c>
 8003d18:	2330      	movs	r3, #48	; 0x30
 8003d1a:	3130      	adds	r1, #48	; 0x30
 8003d1c:	7083      	strb	r3, [r0, #2]
 8003d1e:	70c1      	strb	r1, [r0, #3]
 8003d20:	1d03      	adds	r3, r0, #4
 8003d22:	e7f1      	b.n	8003d08 <__exponent+0x60>

08003d24 <_printf_float>:
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	ed2d 8b02 	vpush	{d8}
 8003d2c:	b08d      	sub	sp, #52	; 0x34
 8003d2e:	460c      	mov	r4, r1
 8003d30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003d34:	4616      	mov	r6, r2
 8003d36:	461f      	mov	r7, r3
 8003d38:	4605      	mov	r5, r0
 8003d3a:	f000 fce7 	bl	800470c <_localeconv_r>
 8003d3e:	f8d0 a000 	ldr.w	sl, [r0]
 8003d42:	4650      	mov	r0, sl
 8003d44:	f7fc fa94 	bl	8000270 <strlen>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	9305      	str	r3, [sp, #20]
 8003d50:	f8d8 3000 	ldr.w	r3, [r8]
 8003d54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d58:	3307      	adds	r3, #7
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
 8003d5e:	f103 0208 	add.w	r2, r3, #8
 8003d62:	f8c8 2000 	str.w	r2, [r8]
 8003d66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d6e:	9307      	str	r3, [sp, #28]
 8003d70:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d74:	ee08 0a10 	vmov	s16, r0
 8003d78:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d80:	4b9e      	ldr	r3, [pc, #632]	; (8003ffc <_printf_float+0x2d8>)
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d86:	f7fc fed1 	bl	8000b2c <__aeabi_dcmpun>
 8003d8a:	bb88      	cbnz	r0, 8003df0 <_printf_float+0xcc>
 8003d8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d90:	4b9a      	ldr	r3, [pc, #616]	; (8003ffc <_printf_float+0x2d8>)
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d96:	f7fc feab 	bl	8000af0 <__aeabi_dcmple>
 8003d9a:	bb48      	cbnz	r0, 8003df0 <_printf_float+0xcc>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4640      	mov	r0, r8
 8003da2:	4649      	mov	r1, r9
 8003da4:	f7fc fe9a 	bl	8000adc <__aeabi_dcmplt>
 8003da8:	b110      	cbz	r0, 8003db0 <_printf_float+0x8c>
 8003daa:	232d      	movs	r3, #45	; 0x2d
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db0:	4a93      	ldr	r2, [pc, #588]	; (8004000 <_printf_float+0x2dc>)
 8003db2:	4b94      	ldr	r3, [pc, #592]	; (8004004 <_printf_float+0x2e0>)
 8003db4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003db8:	bf94      	ite	ls
 8003dba:	4690      	movls	r8, r2
 8003dbc:	4698      	movhi	r8, r3
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	9b05      	ldr	r3, [sp, #20]
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	f04f 0900 	mov.w	r9, #0
 8003dce:	9700      	str	r7, [sp, #0]
 8003dd0:	4633      	mov	r3, r6
 8003dd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 f9da 	bl	8004190 <_printf_common>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f040 8090 	bne.w	8003f02 <_printf_float+0x1de>
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de6:	b00d      	add	sp, #52	; 0x34
 8003de8:	ecbd 8b02 	vpop	{d8}
 8003dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	4640      	mov	r0, r8
 8003df6:	4649      	mov	r1, r9
 8003df8:	f7fc fe98 	bl	8000b2c <__aeabi_dcmpun>
 8003dfc:	b140      	cbz	r0, 8003e10 <_printf_float+0xec>
 8003dfe:	464b      	mov	r3, r9
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bfbc      	itt	lt
 8003e04:	232d      	movlt	r3, #45	; 0x2d
 8003e06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e0a:	4a7f      	ldr	r2, [pc, #508]	; (8004008 <_printf_float+0x2e4>)
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <_printf_float+0x2e8>)
 8003e0e:	e7d1      	b.n	8003db4 <_printf_float+0x90>
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003e16:	9206      	str	r2, [sp, #24]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	d13f      	bne.n	8003e9c <_printf_float+0x178>
 8003e1c:	2306      	movs	r3, #6
 8003e1e:	6063      	str	r3, [r4, #4]
 8003e20:	9b05      	ldr	r3, [sp, #20]
 8003e22:	6861      	ldr	r1, [r4, #4]
 8003e24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9303      	str	r3, [sp, #12]
 8003e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8003e2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003e32:	ab09      	add	r3, sp, #36	; 0x24
 8003e34:	ec49 8b10 	vmov	d0, r8, r9
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6022      	str	r2, [r4, #0]
 8003e3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e40:	4628      	mov	r0, r5
 8003e42:	f7ff fecf 	bl	8003be4 <__cvt>
 8003e46:	9b06      	ldr	r3, [sp, #24]
 8003e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e4a:	2b47      	cmp	r3, #71	; 0x47
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	d108      	bne.n	8003e62 <_printf_float+0x13e>
 8003e50:	1cc8      	adds	r0, r1, #3
 8003e52:	db02      	blt.n	8003e5a <_printf_float+0x136>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	4299      	cmp	r1, r3
 8003e58:	dd41      	ble.n	8003ede <_printf_float+0x1ba>
 8003e5a:	f1ab 0302 	sub.w	r3, fp, #2
 8003e5e:	fa5f fb83 	uxtb.w	fp, r3
 8003e62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e66:	d820      	bhi.n	8003eaa <_printf_float+0x186>
 8003e68:	3901      	subs	r1, #1
 8003e6a:	465a      	mov	r2, fp
 8003e6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e70:	9109      	str	r1, [sp, #36]	; 0x24
 8003e72:	f7ff ff19 	bl	8003ca8 <__exponent>
 8003e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e78:	1813      	adds	r3, r2, r0
 8003e7a:	2a01      	cmp	r2, #1
 8003e7c:	4681      	mov	r9, r0
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	dc02      	bgt.n	8003e88 <_printf_float+0x164>
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	07d2      	lsls	r2, r2, #31
 8003e86:	d501      	bpl.n	8003e8c <_printf_float+0x168>
 8003e88:	3301      	adds	r3, #1
 8003e8a:	6123      	str	r3, [r4, #16]
 8003e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d09c      	beq.n	8003dce <_printf_float+0xaa>
 8003e94:	232d      	movs	r3, #45	; 0x2d
 8003e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9a:	e798      	b.n	8003dce <_printf_float+0xaa>
 8003e9c:	9a06      	ldr	r2, [sp, #24]
 8003e9e:	2a47      	cmp	r2, #71	; 0x47
 8003ea0:	d1be      	bne.n	8003e20 <_printf_float+0xfc>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1bc      	bne.n	8003e20 <_printf_float+0xfc>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e7b9      	b.n	8003e1e <_printf_float+0xfa>
 8003eaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003eae:	d118      	bne.n	8003ee2 <_printf_float+0x1be>
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	dd0b      	ble.n	8003ece <_printf_float+0x1aa>
 8003eb6:	6121      	str	r1, [r4, #16]
 8003eb8:	b913      	cbnz	r3, 8003ec0 <_printf_float+0x19c>
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	07d0      	lsls	r0, r2, #31
 8003ebe:	d502      	bpl.n	8003ec6 <_printf_float+0x1a2>
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	440b      	add	r3, r1
 8003ec4:	6123      	str	r3, [r4, #16]
 8003ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ec8:	f04f 0900 	mov.w	r9, #0
 8003ecc:	e7de      	b.n	8003e8c <_printf_float+0x168>
 8003ece:	b913      	cbnz	r3, 8003ed6 <_printf_float+0x1b2>
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	07d2      	lsls	r2, r2, #31
 8003ed4:	d501      	bpl.n	8003eda <_printf_float+0x1b6>
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	e7f4      	b.n	8003ec4 <_printf_float+0x1a0>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7f2      	b.n	8003ec4 <_printf_float+0x1a0>
 8003ede:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	db05      	blt.n	8003ef4 <_printf_float+0x1d0>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	6121      	str	r1, [r4, #16]
 8003eec:	07d8      	lsls	r0, r3, #31
 8003eee:	d5ea      	bpl.n	8003ec6 <_printf_float+0x1a2>
 8003ef0:	1c4b      	adds	r3, r1, #1
 8003ef2:	e7e7      	b.n	8003ec4 <_printf_float+0x1a0>
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	bfd4      	ite	le
 8003ef8:	f1c1 0202 	rsble	r2, r1, #2
 8003efc:	2201      	movgt	r2, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	e7e0      	b.n	8003ec4 <_printf_float+0x1a0>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	055a      	lsls	r2, r3, #21
 8003f06:	d407      	bmi.n	8003f18 <_printf_float+0x1f4>
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4628      	mov	r0, r5
 8003f10:	47b8      	blx	r7
 8003f12:	3001      	adds	r0, #1
 8003f14:	d12c      	bne.n	8003f70 <_printf_float+0x24c>
 8003f16:	e764      	b.n	8003de2 <_printf_float+0xbe>
 8003f18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f1c:	f240 80e0 	bls.w	80040e0 <_printf_float+0x3bc>
 8003f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f24:	2200      	movs	r2, #0
 8003f26:	2300      	movs	r3, #0
 8003f28:	f7fc fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d034      	beq.n	8003f9a <_printf_float+0x276>
 8003f30:	4a37      	ldr	r2, [pc, #220]	; (8004010 <_printf_float+0x2ec>)
 8003f32:	2301      	movs	r3, #1
 8003f34:	4631      	mov	r1, r6
 8003f36:	4628      	mov	r0, r5
 8003f38:	47b8      	blx	r7
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f43f af51 	beq.w	8003de2 <_printf_float+0xbe>
 8003f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f44:	429a      	cmp	r2, r3
 8003f46:	db02      	blt.n	8003f4e <_printf_float+0x22a>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07d8      	lsls	r0, r3, #31
 8003f4c:	d510      	bpl.n	8003f70 <_printf_float+0x24c>
 8003f4e:	ee18 3a10 	vmov	r3, s16
 8003f52:	4652      	mov	r2, sl
 8003f54:	4631      	mov	r1, r6
 8003f56:	4628      	mov	r0, r5
 8003f58:	47b8      	blx	r7
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f43f af41 	beq.w	8003de2 <_printf_float+0xbe>
 8003f60:	f04f 0800 	mov.w	r8, #0
 8003f64:	f104 091a 	add.w	r9, r4, #26
 8003f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4543      	cmp	r3, r8
 8003f6e:	dc09      	bgt.n	8003f84 <_printf_float+0x260>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	079b      	lsls	r3, r3, #30
 8003f74:	f100 8107 	bmi.w	8004186 <_printf_float+0x462>
 8003f78:	68e0      	ldr	r0, [r4, #12]
 8003f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f7c:	4298      	cmp	r0, r3
 8003f7e:	bfb8      	it	lt
 8003f80:	4618      	movlt	r0, r3
 8003f82:	e730      	b.n	8003de6 <_printf_float+0xc2>
 8003f84:	2301      	movs	r3, #1
 8003f86:	464a      	mov	r2, r9
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b8      	blx	r7
 8003f8e:	3001      	adds	r0, #1
 8003f90:	f43f af27 	beq.w	8003de2 <_printf_float+0xbe>
 8003f94:	f108 0801 	add.w	r8, r8, #1
 8003f98:	e7e6      	b.n	8003f68 <_printf_float+0x244>
 8003f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	dc39      	bgt.n	8004014 <_printf_float+0x2f0>
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <_printf_float+0x2ec>)
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	47b8      	blx	r7
 8003faa:	3001      	adds	r0, #1
 8003fac:	f43f af19 	beq.w	8003de2 <_printf_float+0xbe>
 8003fb0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d102      	bne.n	8003fbe <_printf_float+0x29a>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	07d9      	lsls	r1, r3, #31
 8003fbc:	d5d8      	bpl.n	8003f70 <_printf_float+0x24c>
 8003fbe:	ee18 3a10 	vmov	r3, s16
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	4631      	mov	r1, r6
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b8      	blx	r7
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f43f af09 	beq.w	8003de2 <_printf_float+0xbe>
 8003fd0:	f04f 0900 	mov.w	r9, #0
 8003fd4:	f104 0a1a 	add.w	sl, r4, #26
 8003fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fda:	425b      	negs	r3, r3
 8003fdc:	454b      	cmp	r3, r9
 8003fde:	dc01      	bgt.n	8003fe4 <_printf_float+0x2c0>
 8003fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe2:	e792      	b.n	8003f0a <_printf_float+0x1e6>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4652      	mov	r2, sl
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4628      	mov	r0, r5
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f43f aef7 	beq.w	8003de2 <_printf_float+0xbe>
 8003ff4:	f109 0901 	add.w	r9, r9, #1
 8003ff8:	e7ee      	b.n	8003fd8 <_printf_float+0x2b4>
 8003ffa:	bf00      	nop
 8003ffc:	7fefffff 	.word	0x7fefffff
 8004000:	08006954 	.word	0x08006954
 8004004:	08006958 	.word	0x08006958
 8004008:	0800695c 	.word	0x0800695c
 800400c:	08006960 	.word	0x08006960
 8004010:	08006964 	.word	0x08006964
 8004014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004018:	429a      	cmp	r2, r3
 800401a:	bfa8      	it	ge
 800401c:	461a      	movge	r2, r3
 800401e:	2a00      	cmp	r2, #0
 8004020:	4691      	mov	r9, r2
 8004022:	dc37      	bgt.n	8004094 <_printf_float+0x370>
 8004024:	f04f 0b00 	mov.w	fp, #0
 8004028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800402c:	f104 021a 	add.w	r2, r4, #26
 8004030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	eba3 0309 	sub.w	r3, r3, r9
 8004038:	455b      	cmp	r3, fp
 800403a:	dc33      	bgt.n	80040a4 <_printf_float+0x380>
 800403c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004040:	429a      	cmp	r2, r3
 8004042:	db3b      	blt.n	80040bc <_printf_float+0x398>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	07da      	lsls	r2, r3, #31
 8004048:	d438      	bmi.n	80040bc <_printf_float+0x398>
 800404a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800404e:	eba2 0903 	sub.w	r9, r2, r3
 8004052:	9b05      	ldr	r3, [sp, #20]
 8004054:	1ad2      	subs	r2, r2, r3
 8004056:	4591      	cmp	r9, r2
 8004058:	bfa8      	it	ge
 800405a:	4691      	movge	r9, r2
 800405c:	f1b9 0f00 	cmp.w	r9, #0
 8004060:	dc35      	bgt.n	80040ce <_printf_float+0x3aa>
 8004062:	f04f 0800 	mov.w	r8, #0
 8004066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800406a:	f104 0a1a 	add.w	sl, r4, #26
 800406e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	eba3 0309 	sub.w	r3, r3, r9
 8004078:	4543      	cmp	r3, r8
 800407a:	f77f af79 	ble.w	8003f70 <_printf_float+0x24c>
 800407e:	2301      	movs	r3, #1
 8004080:	4652      	mov	r2, sl
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	47b8      	blx	r7
 8004088:	3001      	adds	r0, #1
 800408a:	f43f aeaa 	beq.w	8003de2 <_printf_float+0xbe>
 800408e:	f108 0801 	add.w	r8, r8, #1
 8004092:	e7ec      	b.n	800406e <_printf_float+0x34a>
 8004094:	4613      	mov	r3, r2
 8004096:	4631      	mov	r1, r6
 8004098:	4642      	mov	r2, r8
 800409a:	4628      	mov	r0, r5
 800409c:	47b8      	blx	r7
 800409e:	3001      	adds	r0, #1
 80040a0:	d1c0      	bne.n	8004024 <_printf_float+0x300>
 80040a2:	e69e      	b.n	8003de2 <_printf_float+0xbe>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4631      	mov	r1, r6
 80040a8:	4628      	mov	r0, r5
 80040aa:	9205      	str	r2, [sp, #20]
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	f43f ae97 	beq.w	8003de2 <_printf_float+0xbe>
 80040b4:	9a05      	ldr	r2, [sp, #20]
 80040b6:	f10b 0b01 	add.w	fp, fp, #1
 80040ba:	e7b9      	b.n	8004030 <_printf_float+0x30c>
 80040bc:	ee18 3a10 	vmov	r3, s16
 80040c0:	4652      	mov	r2, sl
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	d1be      	bne.n	800404a <_printf_float+0x326>
 80040cc:	e689      	b.n	8003de2 <_printf_float+0xbe>
 80040ce:	9a05      	ldr	r2, [sp, #20]
 80040d0:	464b      	mov	r3, r9
 80040d2:	4442      	add	r2, r8
 80040d4:	4631      	mov	r1, r6
 80040d6:	4628      	mov	r0, r5
 80040d8:	47b8      	blx	r7
 80040da:	3001      	adds	r0, #1
 80040dc:	d1c1      	bne.n	8004062 <_printf_float+0x33e>
 80040de:	e680      	b.n	8003de2 <_printf_float+0xbe>
 80040e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040e2:	2a01      	cmp	r2, #1
 80040e4:	dc01      	bgt.n	80040ea <_printf_float+0x3c6>
 80040e6:	07db      	lsls	r3, r3, #31
 80040e8:	d53a      	bpl.n	8004160 <_printf_float+0x43c>
 80040ea:	2301      	movs	r3, #1
 80040ec:	4642      	mov	r2, r8
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f ae74 	beq.w	8003de2 <_printf_float+0xbe>
 80040fa:	ee18 3a10 	vmov	r3, s16
 80040fe:	4652      	mov	r2, sl
 8004100:	4631      	mov	r1, r6
 8004102:	4628      	mov	r0, r5
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f ae6b 	beq.w	8003de2 <_printf_float+0xbe>
 800410c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004110:	2200      	movs	r2, #0
 8004112:	2300      	movs	r3, #0
 8004114:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004118:	f7fc fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800411c:	b9d8      	cbnz	r0, 8004156 <_printf_float+0x432>
 800411e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004122:	f108 0201 	add.w	r2, r8, #1
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	d10e      	bne.n	800414e <_printf_float+0x42a>
 8004130:	e657      	b.n	8003de2 <_printf_float+0xbe>
 8004132:	2301      	movs	r3, #1
 8004134:	4652      	mov	r2, sl
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f ae50 	beq.w	8003de2 <_printf_float+0xbe>
 8004142:	f108 0801 	add.w	r8, r8, #1
 8004146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	4543      	cmp	r3, r8
 800414c:	dcf1      	bgt.n	8004132 <_printf_float+0x40e>
 800414e:	464b      	mov	r3, r9
 8004150:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004154:	e6da      	b.n	8003f0c <_printf_float+0x1e8>
 8004156:	f04f 0800 	mov.w	r8, #0
 800415a:	f104 0a1a 	add.w	sl, r4, #26
 800415e:	e7f2      	b.n	8004146 <_printf_float+0x422>
 8004160:	2301      	movs	r3, #1
 8004162:	4642      	mov	r2, r8
 8004164:	e7df      	b.n	8004126 <_printf_float+0x402>
 8004166:	2301      	movs	r3, #1
 8004168:	464a      	mov	r2, r9
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	f43f ae36 	beq.w	8003de2 <_printf_float+0xbe>
 8004176:	f108 0801 	add.w	r8, r8, #1
 800417a:	68e3      	ldr	r3, [r4, #12]
 800417c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800417e:	1a5b      	subs	r3, r3, r1
 8004180:	4543      	cmp	r3, r8
 8004182:	dcf0      	bgt.n	8004166 <_printf_float+0x442>
 8004184:	e6f8      	b.n	8003f78 <_printf_float+0x254>
 8004186:	f04f 0800 	mov.w	r8, #0
 800418a:	f104 0919 	add.w	r9, r4, #25
 800418e:	e7f4      	b.n	800417a <_printf_float+0x456>

08004190 <_printf_common>:
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	4616      	mov	r6, r2
 8004196:	4699      	mov	r9, r3
 8004198:	688a      	ldr	r2, [r1, #8]
 800419a:	690b      	ldr	r3, [r1, #16]
 800419c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bfb8      	it	lt
 80041a4:	4613      	movlt	r3, r2
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ac:	4607      	mov	r7, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	b10a      	cbz	r2, 80041b6 <_printf_common+0x26>
 80041b2:	3301      	adds	r3, #1
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	0699      	lsls	r1, r3, #26
 80041ba:	bf42      	ittt	mi
 80041bc:	6833      	ldrmi	r3, [r6, #0]
 80041be:	3302      	addmi	r3, #2
 80041c0:	6033      	strmi	r3, [r6, #0]
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	f015 0506 	ands.w	r5, r5, #6
 80041c8:	d106      	bne.n	80041d8 <_printf_common+0x48>
 80041ca:	f104 0a19 	add.w	sl, r4, #25
 80041ce:	68e3      	ldr	r3, [r4, #12]
 80041d0:	6832      	ldr	r2, [r6, #0]
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	42ab      	cmp	r3, r5
 80041d6:	dc26      	bgt.n	8004226 <_printf_common+0x96>
 80041d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041dc:	1e13      	subs	r3, r2, #0
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	bf18      	it	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	0692      	lsls	r2, r2, #26
 80041e6:	d42b      	bmi.n	8004240 <_printf_common+0xb0>
 80041e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ec:	4649      	mov	r1, r9
 80041ee:	4638      	mov	r0, r7
 80041f0:	47c0      	blx	r8
 80041f2:	3001      	adds	r0, #1
 80041f4:	d01e      	beq.n	8004234 <_printf_common+0xa4>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	2b04      	cmp	r3, #4
 8004200:	bf02      	ittt	eq
 8004202:	68e5      	ldreq	r5, [r4, #12]
 8004204:	6833      	ldreq	r3, [r6, #0]
 8004206:	1aed      	subeq	r5, r5, r3
 8004208:	68a3      	ldr	r3, [r4, #8]
 800420a:	bf0c      	ite	eq
 800420c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004210:	2500      	movne	r5, #0
 8004212:	4293      	cmp	r3, r2
 8004214:	bfc4      	itt	gt
 8004216:	1a9b      	subgt	r3, r3, r2
 8004218:	18ed      	addgt	r5, r5, r3
 800421a:	2600      	movs	r6, #0
 800421c:	341a      	adds	r4, #26
 800421e:	42b5      	cmp	r5, r6
 8004220:	d11a      	bne.n	8004258 <_printf_common+0xc8>
 8004222:	2000      	movs	r0, #0
 8004224:	e008      	b.n	8004238 <_printf_common+0xa8>
 8004226:	2301      	movs	r3, #1
 8004228:	4652      	mov	r2, sl
 800422a:	4649      	mov	r1, r9
 800422c:	4638      	mov	r0, r7
 800422e:	47c0      	blx	r8
 8004230:	3001      	adds	r0, #1
 8004232:	d103      	bne.n	800423c <_printf_common+0xac>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423c:	3501      	adds	r5, #1
 800423e:	e7c6      	b.n	80041ce <_printf_common+0x3e>
 8004240:	18e1      	adds	r1, r4, r3
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	2030      	movs	r0, #48	; 0x30
 8004246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800424a:	4422      	add	r2, r4
 800424c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004254:	3302      	adds	r3, #2
 8004256:	e7c7      	b.n	80041e8 <_printf_common+0x58>
 8004258:	2301      	movs	r3, #1
 800425a:	4622      	mov	r2, r4
 800425c:	4649      	mov	r1, r9
 800425e:	4638      	mov	r0, r7
 8004260:	47c0      	blx	r8
 8004262:	3001      	adds	r0, #1
 8004264:	d0e6      	beq.n	8004234 <_printf_common+0xa4>
 8004266:	3601      	adds	r6, #1
 8004268:	e7d9      	b.n	800421e <_printf_common+0x8e>
	...

0800426c <_printf_i>:
 800426c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	7e0f      	ldrb	r7, [r1, #24]
 8004272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004274:	2f78      	cmp	r7, #120	; 0x78
 8004276:	4691      	mov	r9, r2
 8004278:	4680      	mov	r8, r0
 800427a:	460c      	mov	r4, r1
 800427c:	469a      	mov	sl, r3
 800427e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004282:	d807      	bhi.n	8004294 <_printf_i+0x28>
 8004284:	2f62      	cmp	r7, #98	; 0x62
 8004286:	d80a      	bhi.n	800429e <_printf_i+0x32>
 8004288:	2f00      	cmp	r7, #0
 800428a:	f000 80d4 	beq.w	8004436 <_printf_i+0x1ca>
 800428e:	2f58      	cmp	r7, #88	; 0x58
 8004290:	f000 80c0 	beq.w	8004414 <_printf_i+0x1a8>
 8004294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800429c:	e03a      	b.n	8004314 <_printf_i+0xa8>
 800429e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042a2:	2b15      	cmp	r3, #21
 80042a4:	d8f6      	bhi.n	8004294 <_printf_i+0x28>
 80042a6:	a101      	add	r1, pc, #4	; (adr r1, 80042ac <_printf_i+0x40>)
 80042a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004295 	.word	0x08004295
 80042b8:	08004295 	.word	0x08004295
 80042bc:	08004295 	.word	0x08004295
 80042c0:	08004295 	.word	0x08004295
 80042c4:	08004319 	.word	0x08004319
 80042c8:	08004295 	.word	0x08004295
 80042cc:	08004295 	.word	0x08004295
 80042d0:	08004295 	.word	0x08004295
 80042d4:	08004295 	.word	0x08004295
 80042d8:	0800441d 	.word	0x0800441d
 80042dc:	08004345 	.word	0x08004345
 80042e0:	080043d7 	.word	0x080043d7
 80042e4:	08004295 	.word	0x08004295
 80042e8:	08004295 	.word	0x08004295
 80042ec:	0800443f 	.word	0x0800443f
 80042f0:	08004295 	.word	0x08004295
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004295 	.word	0x08004295
 80042fc:	08004295 	.word	0x08004295
 8004300:	080043df 	.word	0x080043df
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	602a      	str	r2, [r5, #0]
 800430c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004314:	2301      	movs	r3, #1
 8004316:	e09f      	b.n	8004458 <_printf_i+0x1ec>
 8004318:	6820      	ldr	r0, [r4, #0]
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	0607      	lsls	r7, r0, #24
 800431e:	f103 0104 	add.w	r1, r3, #4
 8004322:	6029      	str	r1, [r5, #0]
 8004324:	d501      	bpl.n	800432a <_printf_i+0xbe>
 8004326:	681e      	ldr	r6, [r3, #0]
 8004328:	e003      	b.n	8004332 <_printf_i+0xc6>
 800432a:	0646      	lsls	r6, r0, #25
 800432c:	d5fb      	bpl.n	8004326 <_printf_i+0xba>
 800432e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004332:	2e00      	cmp	r6, #0
 8004334:	da03      	bge.n	800433e <_printf_i+0xd2>
 8004336:	232d      	movs	r3, #45	; 0x2d
 8004338:	4276      	negs	r6, r6
 800433a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433e:	485a      	ldr	r0, [pc, #360]	; (80044a8 <_printf_i+0x23c>)
 8004340:	230a      	movs	r3, #10
 8004342:	e012      	b.n	800436a <_printf_i+0xfe>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	6029      	str	r1, [r5, #0]
 800434c:	0605      	lsls	r5, r0, #24
 800434e:	d501      	bpl.n	8004354 <_printf_i+0xe8>
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0xee>
 8004354:	0641      	lsls	r1, r0, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0xe4>
 8004358:	881e      	ldrh	r6, [r3, #0]
 800435a:	4853      	ldr	r0, [pc, #332]	; (80044a8 <_printf_i+0x23c>)
 800435c:	2f6f      	cmp	r7, #111	; 0x6f
 800435e:	bf0c      	ite	eq
 8004360:	2308      	moveq	r3, #8
 8004362:	230a      	movne	r3, #10
 8004364:	2100      	movs	r1, #0
 8004366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800436a:	6865      	ldr	r5, [r4, #4]
 800436c:	60a5      	str	r5, [r4, #8]
 800436e:	2d00      	cmp	r5, #0
 8004370:	bfa2      	ittt	ge
 8004372:	6821      	ldrge	r1, [r4, #0]
 8004374:	f021 0104 	bicge.w	r1, r1, #4
 8004378:	6021      	strge	r1, [r4, #0]
 800437a:	b90e      	cbnz	r6, 8004380 <_printf_i+0x114>
 800437c:	2d00      	cmp	r5, #0
 800437e:	d04b      	beq.n	8004418 <_printf_i+0x1ac>
 8004380:	4615      	mov	r5, r2
 8004382:	fbb6 f1f3 	udiv	r1, r6, r3
 8004386:	fb03 6711 	mls	r7, r3, r1, r6
 800438a:	5dc7      	ldrb	r7, [r0, r7]
 800438c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004390:	4637      	mov	r7, r6
 8004392:	42bb      	cmp	r3, r7
 8004394:	460e      	mov	r6, r1
 8004396:	d9f4      	bls.n	8004382 <_printf_i+0x116>
 8004398:	2b08      	cmp	r3, #8
 800439a:	d10b      	bne.n	80043b4 <_printf_i+0x148>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07de      	lsls	r6, r3, #31
 80043a0:	d508      	bpl.n	80043b4 <_printf_i+0x148>
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	6861      	ldr	r1, [r4, #4]
 80043a6:	4299      	cmp	r1, r3
 80043a8:	bfde      	ittt	le
 80043aa:	2330      	movle	r3, #48	; 0x30
 80043ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043b4:	1b52      	subs	r2, r2, r5
 80043b6:	6122      	str	r2, [r4, #16]
 80043b8:	f8cd a000 	str.w	sl, [sp]
 80043bc:	464b      	mov	r3, r9
 80043be:	aa03      	add	r2, sp, #12
 80043c0:	4621      	mov	r1, r4
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7ff fee4 	bl	8004190 <_printf_common>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d14a      	bne.n	8004462 <_printf_i+0x1f6>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d0:	b004      	add	sp, #16
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	f043 0320 	orr.w	r3, r3, #32
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	4833      	ldr	r0, [pc, #204]	; (80044ac <_printf_i+0x240>)
 80043e0:	2778      	movs	r7, #120	; 0x78
 80043e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	6829      	ldr	r1, [r5, #0]
 80043ea:	061f      	lsls	r7, r3, #24
 80043ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80043f0:	d402      	bmi.n	80043f8 <_printf_i+0x18c>
 80043f2:	065f      	lsls	r7, r3, #25
 80043f4:	bf48      	it	mi
 80043f6:	b2b6      	uxthmi	r6, r6
 80043f8:	07df      	lsls	r7, r3, #31
 80043fa:	bf48      	it	mi
 80043fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004400:	6029      	str	r1, [r5, #0]
 8004402:	bf48      	it	mi
 8004404:	6023      	strmi	r3, [r4, #0]
 8004406:	b91e      	cbnz	r6, 8004410 <_printf_i+0x1a4>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	f023 0320 	bic.w	r3, r3, #32
 800440e:	6023      	str	r3, [r4, #0]
 8004410:	2310      	movs	r3, #16
 8004412:	e7a7      	b.n	8004364 <_printf_i+0xf8>
 8004414:	4824      	ldr	r0, [pc, #144]	; (80044a8 <_printf_i+0x23c>)
 8004416:	e7e4      	b.n	80043e2 <_printf_i+0x176>
 8004418:	4615      	mov	r5, r2
 800441a:	e7bd      	b.n	8004398 <_printf_i+0x12c>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	6826      	ldr	r6, [r4, #0]
 8004420:	6961      	ldr	r1, [r4, #20]
 8004422:	1d18      	adds	r0, r3, #4
 8004424:	6028      	str	r0, [r5, #0]
 8004426:	0635      	lsls	r5, r6, #24
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	d501      	bpl.n	8004430 <_printf_i+0x1c4>
 800442c:	6019      	str	r1, [r3, #0]
 800442e:	e002      	b.n	8004436 <_printf_i+0x1ca>
 8004430:	0670      	lsls	r0, r6, #25
 8004432:	d5fb      	bpl.n	800442c <_printf_i+0x1c0>
 8004434:	8019      	strh	r1, [r3, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	4615      	mov	r5, r2
 800443c:	e7bc      	b.n	80043b8 <_printf_i+0x14c>
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	1d1a      	adds	r2, r3, #4
 8004442:	602a      	str	r2, [r5, #0]
 8004444:	681d      	ldr	r5, [r3, #0]
 8004446:	6862      	ldr	r2, [r4, #4]
 8004448:	2100      	movs	r1, #0
 800444a:	4628      	mov	r0, r5
 800444c:	f7fb fec0 	bl	80001d0 <memchr>
 8004450:	b108      	cbz	r0, 8004456 <_printf_i+0x1ea>
 8004452:	1b40      	subs	r0, r0, r5
 8004454:	6060      	str	r0, [r4, #4]
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	2300      	movs	r3, #0
 800445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004460:	e7aa      	b.n	80043b8 <_printf_i+0x14c>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	462a      	mov	r2, r5
 8004466:	4649      	mov	r1, r9
 8004468:	4640      	mov	r0, r8
 800446a:	47d0      	blx	sl
 800446c:	3001      	adds	r0, #1
 800446e:	d0ad      	beq.n	80043cc <_printf_i+0x160>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	079b      	lsls	r3, r3, #30
 8004474:	d413      	bmi.n	800449e <_printf_i+0x232>
 8004476:	68e0      	ldr	r0, [r4, #12]
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	4298      	cmp	r0, r3
 800447c:	bfb8      	it	lt
 800447e:	4618      	movlt	r0, r3
 8004480:	e7a6      	b.n	80043d0 <_printf_i+0x164>
 8004482:	2301      	movs	r3, #1
 8004484:	4632      	mov	r2, r6
 8004486:	4649      	mov	r1, r9
 8004488:	4640      	mov	r0, r8
 800448a:	47d0      	blx	sl
 800448c:	3001      	adds	r0, #1
 800448e:	d09d      	beq.n	80043cc <_printf_i+0x160>
 8004490:	3501      	adds	r5, #1
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	9903      	ldr	r1, [sp, #12]
 8004496:	1a5b      	subs	r3, r3, r1
 8004498:	42ab      	cmp	r3, r5
 800449a:	dcf2      	bgt.n	8004482 <_printf_i+0x216>
 800449c:	e7eb      	b.n	8004476 <_printf_i+0x20a>
 800449e:	2500      	movs	r5, #0
 80044a0:	f104 0619 	add.w	r6, r4, #25
 80044a4:	e7f5      	b.n	8004492 <_printf_i+0x226>
 80044a6:	bf00      	nop
 80044a8:	08006966 	.word	0x08006966
 80044ac:	08006977 	.word	0x08006977

080044b0 <std>:
 80044b0:	2300      	movs	r3, #0
 80044b2:	b510      	push	{r4, lr}
 80044b4:	4604      	mov	r4, r0
 80044b6:	e9c0 3300 	strd	r3, r3, [r0]
 80044ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044be:	6083      	str	r3, [r0, #8]
 80044c0:	8181      	strh	r1, [r0, #12]
 80044c2:	6643      	str	r3, [r0, #100]	; 0x64
 80044c4:	81c2      	strh	r2, [r0, #14]
 80044c6:	6183      	str	r3, [r0, #24]
 80044c8:	4619      	mov	r1, r3
 80044ca:	2208      	movs	r2, #8
 80044cc:	305c      	adds	r0, #92	; 0x5c
 80044ce:	f000 f914 	bl	80046fa <memset>
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <std+0x58>)
 80044d4:	6263      	str	r3, [r4, #36]	; 0x24
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <std+0x5c>)
 80044d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <std+0x60>)
 80044dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <std+0x64>)
 80044e0:	6323      	str	r3, [r4, #48]	; 0x30
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <std+0x68>)
 80044e4:	6224      	str	r4, [r4, #32]
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d006      	beq.n	80044f8 <std+0x48>
 80044ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044ee:	4294      	cmp	r4, r2
 80044f0:	d002      	beq.n	80044f8 <std+0x48>
 80044f2:	33d0      	adds	r3, #208	; 0xd0
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d105      	bne.n	8004504 <std+0x54>
 80044f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	f000 b978 	b.w	80047f4 <__retarget_lock_init_recursive>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	08004675 	.word	0x08004675
 800450c:	08004697 	.word	0x08004697
 8004510:	080046cf 	.word	0x080046cf
 8004514:	080046f3 	.word	0x080046f3
 8004518:	20000330 	.word	0x20000330

0800451c <stdio_exit_handler>:
 800451c:	4a02      	ldr	r2, [pc, #8]	; (8004528 <stdio_exit_handler+0xc>)
 800451e:	4903      	ldr	r1, [pc, #12]	; (800452c <stdio_exit_handler+0x10>)
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <stdio_exit_handler+0x14>)
 8004522:	f000 b869 	b.w	80045f8 <_fwalk_sglue>
 8004526:	bf00      	nop
 8004528:	2000000c 	.word	0x2000000c
 800452c:	080061a9 	.word	0x080061a9
 8004530:	20000018 	.word	0x20000018

08004534 <cleanup_stdio>:
 8004534:	6841      	ldr	r1, [r0, #4]
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <cleanup_stdio+0x34>)
 8004538:	4299      	cmp	r1, r3
 800453a:	b510      	push	{r4, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	d001      	beq.n	8004544 <cleanup_stdio+0x10>
 8004540:	f001 fe32 	bl	80061a8 <_fflush_r>
 8004544:	68a1      	ldr	r1, [r4, #8]
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <cleanup_stdio+0x38>)
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <cleanup_stdio+0x1e>
 800454c:	4620      	mov	r0, r4
 800454e:	f001 fe2b 	bl	80061a8 <_fflush_r>
 8004552:	68e1      	ldr	r1, [r4, #12]
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <cleanup_stdio+0x3c>)
 8004556:	4299      	cmp	r1, r3
 8004558:	d004      	beq.n	8004564 <cleanup_stdio+0x30>
 800455a:	4620      	mov	r0, r4
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	f001 be22 	b.w	80061a8 <_fflush_r>
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	20000330 	.word	0x20000330
 800456c:	20000398 	.word	0x20000398
 8004570:	20000400 	.word	0x20000400

08004574 <global_stdio_init.part.0>:
 8004574:	b510      	push	{r4, lr}
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <global_stdio_init.part.0+0x30>)
 8004578:	4c0b      	ldr	r4, [pc, #44]	; (80045a8 <global_stdio_init.part.0+0x34>)
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <global_stdio_init.part.0+0x38>)
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4620      	mov	r0, r4
 8004580:	2200      	movs	r2, #0
 8004582:	2104      	movs	r1, #4
 8004584:	f7ff ff94 	bl	80044b0 <std>
 8004588:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800458c:	2201      	movs	r2, #1
 800458e:	2109      	movs	r1, #9
 8004590:	f7ff ff8e 	bl	80044b0 <std>
 8004594:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004598:	2202      	movs	r2, #2
 800459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459e:	2112      	movs	r1, #18
 80045a0:	f7ff bf86 	b.w	80044b0 <std>
 80045a4:	20000468 	.word	0x20000468
 80045a8:	20000330 	.word	0x20000330
 80045ac:	0800451d 	.word	0x0800451d

080045b0 <__sfp_lock_acquire>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__sfp_lock_acquire+0x8>)
 80045b2:	f000 b920 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	20000471 	.word	0x20000471

080045bc <__sfp_lock_release>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__sfp_lock_release+0x8>)
 80045be:	f000 b91b 	b.w	80047f8 <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000471 	.word	0x20000471

080045c8 <__sinit>:
 80045c8:	b510      	push	{r4, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	f7ff fff0 	bl	80045b0 <__sfp_lock_acquire>
 80045d0:	6a23      	ldr	r3, [r4, #32]
 80045d2:	b11b      	cbz	r3, 80045dc <__sinit+0x14>
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f7ff bff0 	b.w	80045bc <__sfp_lock_release>
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <__sinit+0x28>)
 80045de:	6223      	str	r3, [r4, #32]
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__sinit+0x2c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f5      	bne.n	80045d4 <__sinit+0xc>
 80045e8:	f7ff ffc4 	bl	8004574 <global_stdio_init.part.0>
 80045ec:	e7f2      	b.n	80045d4 <__sinit+0xc>
 80045ee:	bf00      	nop
 80045f0:	08004535 	.word	0x08004535
 80045f4:	20000468 	.word	0x20000468

080045f8 <_fwalk_sglue>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4607      	mov	r7, r0
 80045fe:	4688      	mov	r8, r1
 8004600:	4614      	mov	r4, r2
 8004602:	2600      	movs	r6, #0
 8004604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004608:	f1b9 0901 	subs.w	r9, r9, #1
 800460c:	d505      	bpl.n	800461a <_fwalk_sglue+0x22>
 800460e:	6824      	ldr	r4, [r4, #0]
 8004610:	2c00      	cmp	r4, #0
 8004612:	d1f7      	bne.n	8004604 <_fwalk_sglue+0xc>
 8004614:	4630      	mov	r0, r6
 8004616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d907      	bls.n	8004630 <_fwalk_sglue+0x38>
 8004620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	d003      	beq.n	8004630 <_fwalk_sglue+0x38>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	47c0      	blx	r8
 800462e:	4306      	orrs	r6, r0
 8004630:	3568      	adds	r5, #104	; 0x68
 8004632:	e7e9      	b.n	8004608 <_fwalk_sglue+0x10>

08004634 <siprintf>:
 8004634:	b40e      	push	{r1, r2, r3}
 8004636:	b500      	push	{lr}
 8004638:	b09c      	sub	sp, #112	; 0x70
 800463a:	ab1d      	add	r3, sp, #116	; 0x74
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004644:	4809      	ldr	r0, [pc, #36]	; (800466c <siprintf+0x38>)
 8004646:	9107      	str	r1, [sp, #28]
 8004648:	9104      	str	r1, [sp, #16]
 800464a:	4909      	ldr	r1, [pc, #36]	; (8004670 <siprintf+0x3c>)
 800464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	a902      	add	r1, sp, #8
 8004658:	f001 fc22 	bl	8005ea0 <_svfiprintf_r>
 800465c:	9b02      	ldr	r3, [sp, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	b01c      	add	sp, #112	; 0x70
 8004664:	f85d eb04 	ldr.w	lr, [sp], #4
 8004668:	b003      	add	sp, #12
 800466a:	4770      	bx	lr
 800466c:	20000064 	.word	0x20000064
 8004670:	ffff0208 	.word	0xffff0208

08004674 <__sread>:
 8004674:	b510      	push	{r4, lr}
 8004676:	460c      	mov	r4, r1
 8004678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467c:	f000 f86c 	bl	8004758 <_read_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	bfab      	itete	ge
 8004684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004686:	89a3      	ldrhlt	r3, [r4, #12]
 8004688:	181b      	addge	r3, r3, r0
 800468a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800468e:	bfac      	ite	ge
 8004690:	6563      	strge	r3, [r4, #84]	; 0x54
 8004692:	81a3      	strhlt	r3, [r4, #12]
 8004694:	bd10      	pop	{r4, pc}

08004696 <__swrite>:
 8004696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	461f      	mov	r7, r3
 800469c:	898b      	ldrh	r3, [r1, #12]
 800469e:	05db      	lsls	r3, r3, #23
 80046a0:	4605      	mov	r5, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	4616      	mov	r6, r2
 80046a6:	d505      	bpl.n	80046b4 <__swrite+0x1e>
 80046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ac:	2302      	movs	r3, #2
 80046ae:	2200      	movs	r2, #0
 80046b0:	f000 f840 	bl	8004734 <_lseek_r>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	4632      	mov	r2, r6
 80046c2:	463b      	mov	r3, r7
 80046c4:	4628      	mov	r0, r5
 80046c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ca:	f000 b857 	b.w	800477c <_write_r>

080046ce <__sseek>:
 80046ce:	b510      	push	{r4, lr}
 80046d0:	460c      	mov	r4, r1
 80046d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d6:	f000 f82d 	bl	8004734 <_lseek_r>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	bf15      	itete	ne
 80046e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ea:	81a3      	strheq	r3, [r4, #12]
 80046ec:	bf18      	it	ne
 80046ee:	81a3      	strhne	r3, [r4, #12]
 80046f0:	bd10      	pop	{r4, pc}

080046f2 <__sclose>:
 80046f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f6:	f000 b80d 	b.w	8004714 <_close_r>

080046fa <memset>:
 80046fa:	4402      	add	r2, r0
 80046fc:	4603      	mov	r3, r0
 80046fe:	4293      	cmp	r3, r2
 8004700:	d100      	bne.n	8004704 <memset+0xa>
 8004702:	4770      	bx	lr
 8004704:	f803 1b01 	strb.w	r1, [r3], #1
 8004708:	e7f9      	b.n	80046fe <memset+0x4>
	...

0800470c <_localeconv_r>:
 800470c:	4800      	ldr	r0, [pc, #0]	; (8004710 <_localeconv_r+0x4>)
 800470e:	4770      	bx	lr
 8004710:	20000158 	.word	0x20000158

08004714 <_close_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d06      	ldr	r5, [pc, #24]	; (8004730 <_close_r+0x1c>)
 8004718:	2300      	movs	r3, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	f7fd f803 	bl	800172a <_close>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_close_r+0x1a>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_close_r+0x1a>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	2000046c 	.word	0x2000046c

08004734 <_lseek_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	; (8004754 <_lseek_r+0x20>)
 8004738:	4604      	mov	r4, r0
 800473a:	4608      	mov	r0, r1
 800473c:	4611      	mov	r1, r2
 800473e:	2200      	movs	r2, #0
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f7fd f818 	bl	8001778 <_lseek>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_lseek_r+0x1e>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	b103      	cbz	r3, 8004752 <_lseek_r+0x1e>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	2000046c 	.word	0x2000046c

08004758 <_read_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_read_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc ffa6 	bl	80016b8 <_read>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_read_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_read_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	2000046c 	.word	0x2000046c

0800477c <_write_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	; (800479c <_write_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc ffb1 	bl	80016f2 <_write>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_write_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_write_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	2000046c 	.word	0x2000046c

080047a0 <__errno>:
 80047a0:	4b01      	ldr	r3, [pc, #4]	; (80047a8 <__errno+0x8>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000064 	.word	0x20000064

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f002 f896 	bl	80068f0 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	08006ccc 	.word	0x08006ccc
 80047e8:	08006ccc 	.word	0x08006ccc
 80047ec:	08006ccc 	.word	0x08006ccc
 80047f0:	08006cd0 	.word	0x08006cd0

080047f4 <__retarget_lock_init_recursive>:
 80047f4:	4770      	bx	lr

080047f6 <__retarget_lock_acquire_recursive>:
 80047f6:	4770      	bx	lr

080047f8 <__retarget_lock_release_recursive>:
 80047f8:	4770      	bx	lr

080047fa <quorem>:
 80047fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fe:	6903      	ldr	r3, [r0, #16]
 8004800:	690c      	ldr	r4, [r1, #16]
 8004802:	42a3      	cmp	r3, r4
 8004804:	4607      	mov	r7, r0
 8004806:	db7e      	blt.n	8004906 <quorem+0x10c>
 8004808:	3c01      	subs	r4, #1
 800480a:	f101 0814 	add.w	r8, r1, #20
 800480e:	f100 0514 	add.w	r5, r0, #20
 8004812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800481c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004820:	3301      	adds	r3, #1
 8004822:	429a      	cmp	r2, r3
 8004824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800482c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004830:	d331      	bcc.n	8004896 <quorem+0x9c>
 8004832:	f04f 0e00 	mov.w	lr, #0
 8004836:	4640      	mov	r0, r8
 8004838:	46ac      	mov	ip, r5
 800483a:	46f2      	mov	sl, lr
 800483c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004840:	b293      	uxth	r3, r2
 8004842:	fb06 e303 	mla	r3, r6, r3, lr
 8004846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800484a:	0c1a      	lsrs	r2, r3, #16
 800484c:	b29b      	uxth	r3, r3
 800484e:	ebaa 0303 	sub.w	r3, sl, r3
 8004852:	f8dc a000 	ldr.w	sl, [ip]
 8004856:	fa13 f38a 	uxtah	r3, r3, sl
 800485a:	fb06 220e 	mla	r2, r6, lr, r2
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004866:	b292      	uxth	r2, r2
 8004868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800486c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004870:	f8bd 3000 	ldrh.w	r3, [sp]
 8004874:	4581      	cmp	r9, r0
 8004876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800487a:	f84c 3b04 	str.w	r3, [ip], #4
 800487e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004882:	d2db      	bcs.n	800483c <quorem+0x42>
 8004884:	f855 300b 	ldr.w	r3, [r5, fp]
 8004888:	b92b      	cbnz	r3, 8004896 <quorem+0x9c>
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	3b04      	subs	r3, #4
 800488e:	429d      	cmp	r5, r3
 8004890:	461a      	mov	r2, r3
 8004892:	d32c      	bcc.n	80048ee <quorem+0xf4>
 8004894:	613c      	str	r4, [r7, #16]
 8004896:	4638      	mov	r0, r7
 8004898:	f001 f9a8 	bl	8005bec <__mcmp>
 800489c:	2800      	cmp	r0, #0
 800489e:	db22      	blt.n	80048e6 <quorem+0xec>
 80048a0:	3601      	adds	r6, #1
 80048a2:	4629      	mov	r1, r5
 80048a4:	2000      	movs	r0, #0
 80048a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80048aa:	f8d1 c000 	ldr.w	ip, [r1]
 80048ae:	b293      	uxth	r3, r2
 80048b0:	1ac3      	subs	r3, r0, r3
 80048b2:	0c12      	lsrs	r2, r2, #16
 80048b4:	fa13 f38c 	uxtah	r3, r3, ip
 80048b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80048bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048c6:	45c1      	cmp	r9, r8
 80048c8:	f841 3b04 	str.w	r3, [r1], #4
 80048cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048d0:	d2e9      	bcs.n	80048a6 <quorem+0xac>
 80048d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048da:	b922      	cbnz	r2, 80048e6 <quorem+0xec>
 80048dc:	3b04      	subs	r3, #4
 80048de:	429d      	cmp	r5, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	d30a      	bcc.n	80048fa <quorem+0x100>
 80048e4:	613c      	str	r4, [r7, #16]
 80048e6:	4630      	mov	r0, r6
 80048e8:	b003      	add	sp, #12
 80048ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	d1ce      	bne.n	8004894 <quorem+0x9a>
 80048f6:	3c01      	subs	r4, #1
 80048f8:	e7c9      	b.n	800488e <quorem+0x94>
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	3b04      	subs	r3, #4
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d1f0      	bne.n	80048e4 <quorem+0xea>
 8004902:	3c01      	subs	r4, #1
 8004904:	e7eb      	b.n	80048de <quorem+0xe4>
 8004906:	2000      	movs	r0, #0
 8004908:	e7ee      	b.n	80048e8 <quorem+0xee>
 800490a:	0000      	movs	r0, r0
 800490c:	0000      	movs	r0, r0
	...

08004910 <_dtoa_r>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	ed2d 8b04 	vpush	{d8-d9}
 8004918:	69c5      	ldr	r5, [r0, #28]
 800491a:	b093      	sub	sp, #76	; 0x4c
 800491c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004920:	ec57 6b10 	vmov	r6, r7, d0
 8004924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004928:	9107      	str	r1, [sp, #28]
 800492a:	4604      	mov	r4, r0
 800492c:	920a      	str	r2, [sp, #40]	; 0x28
 800492e:	930d      	str	r3, [sp, #52]	; 0x34
 8004930:	b975      	cbnz	r5, 8004950 <_dtoa_r+0x40>
 8004932:	2010      	movs	r0, #16
 8004934:	f000 fe2a 	bl	800558c <malloc>
 8004938:	4602      	mov	r2, r0
 800493a:	61e0      	str	r0, [r4, #28]
 800493c:	b920      	cbnz	r0, 8004948 <_dtoa_r+0x38>
 800493e:	4bae      	ldr	r3, [pc, #696]	; (8004bf8 <_dtoa_r+0x2e8>)
 8004940:	21ef      	movs	r1, #239	; 0xef
 8004942:	48ae      	ldr	r0, [pc, #696]	; (8004bfc <_dtoa_r+0x2ec>)
 8004944:	f001 fc90 	bl	8006268 <__assert_func>
 8004948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800494c:	6005      	str	r5, [r0, #0]
 800494e:	60c5      	str	r5, [r0, #12]
 8004950:	69e3      	ldr	r3, [r4, #28]
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	b151      	cbz	r1, 800496c <_dtoa_r+0x5c>
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	604a      	str	r2, [r1, #4]
 800495a:	2301      	movs	r3, #1
 800495c:	4093      	lsls	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 ff07 	bl	8005774 <_Bfree>
 8004966:	69e3      	ldr	r3, [r4, #28]
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	1e3b      	subs	r3, r7, #0
 800496e:	bfbb      	ittet	lt
 8004970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004974:	9303      	strlt	r3, [sp, #12]
 8004976:	2300      	movge	r3, #0
 8004978:	2201      	movlt	r2, #1
 800497a:	bfac      	ite	ge
 800497c:	f8c8 3000 	strge.w	r3, [r8]
 8004980:	f8c8 2000 	strlt.w	r2, [r8]
 8004984:	4b9e      	ldr	r3, [pc, #632]	; (8004c00 <_dtoa_r+0x2f0>)
 8004986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800498a:	ea33 0308 	bics.w	r3, r3, r8
 800498e:	d11b      	bne.n	80049c8 <_dtoa_r+0xb8>
 8004990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004992:	f242 730f 	movw	r3, #9999	; 0x270f
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800499c:	4333      	orrs	r3, r6
 800499e:	f000 8593 	beq.w	80054c8 <_dtoa_r+0xbb8>
 80049a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049a4:	b963      	cbnz	r3, 80049c0 <_dtoa_r+0xb0>
 80049a6:	4b97      	ldr	r3, [pc, #604]	; (8004c04 <_dtoa_r+0x2f4>)
 80049a8:	e027      	b.n	80049fa <_dtoa_r+0xea>
 80049aa:	4b97      	ldr	r3, [pc, #604]	; (8004c08 <_dtoa_r+0x2f8>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	9800      	ldr	r0, [sp, #0]
 80049b6:	b013      	add	sp, #76	; 0x4c
 80049b8:	ecbd 8b04 	vpop	{d8-d9}
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	4b90      	ldr	r3, [pc, #576]	; (8004c04 <_dtoa_r+0x2f4>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	3303      	adds	r3, #3
 80049c6:	e7f3      	b.n	80049b0 <_dtoa_r+0xa0>
 80049c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	ec51 0b17 	vmov	r0, r1, d7
 80049d2:	eeb0 8a47 	vmov.f32	s16, s14
 80049d6:	eef0 8a67 	vmov.f32	s17, s15
 80049da:	2300      	movs	r3, #0
 80049dc:	f7fc f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80049e0:	4681      	mov	r9, r0
 80049e2:	b160      	cbz	r0, 80049fe <_dtoa_r+0xee>
 80049e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049e6:	2301      	movs	r3, #1
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8568 	beq.w	80054c2 <_dtoa_r+0xbb2>
 80049f2:	4b86      	ldr	r3, [pc, #536]	; (8004c0c <_dtoa_r+0x2fc>)
 80049f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	e7da      	b.n	80049b4 <_dtoa_r+0xa4>
 80049fe:	aa10      	add	r2, sp, #64	; 0x40
 8004a00:	a911      	add	r1, sp, #68	; 0x44
 8004a02:	4620      	mov	r0, r4
 8004a04:	eeb0 0a48 	vmov.f32	s0, s16
 8004a08:	eef0 0a68 	vmov.f32	s1, s17
 8004a0c:	f001 f994 	bl	8005d38 <__d2b>
 8004a10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a14:	4682      	mov	sl, r0
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	d07f      	beq.n	8004b1a <_dtoa_r+0x20a>
 8004a1a:	ee18 3a90 	vmov	r3, s17
 8004a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004a26:	ec51 0b18 	vmov	r0, r1, d8
 8004a2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004a36:	4619      	mov	r1, r3
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4b75      	ldr	r3, [pc, #468]	; (8004c10 <_dtoa_r+0x300>)
 8004a3c:	f7fb fc24 	bl	8000288 <__aeabi_dsub>
 8004a40:	a367      	add	r3, pc, #412	; (adr r3, 8004be0 <_dtoa_r+0x2d0>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fdd7 	bl	80005f8 <__aeabi_dmul>
 8004a4a:	a367      	add	r3, pc, #412	; (adr r3, 8004be8 <_dtoa_r+0x2d8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fc1c 	bl	800028c <__adddf3>
 8004a54:	4606      	mov	r6, r0
 8004a56:	4628      	mov	r0, r5
 8004a58:	460f      	mov	r7, r1
 8004a5a:	f7fb fd63 	bl	8000524 <__aeabi_i2d>
 8004a5e:	a364      	add	r3, pc, #400	; (adr r3, 8004bf0 <_dtoa_r+0x2e0>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fdc8 	bl	80005f8 <__aeabi_dmul>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	4639      	mov	r1, r7
 8004a70:	f7fb fc0c 	bl	800028c <__adddf3>
 8004a74:	4606      	mov	r6, r0
 8004a76:	460f      	mov	r7, r1
 8004a78:	f7fc f86e 	bl	8000b58 <__aeabi_d2iz>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4683      	mov	fp, r0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4630      	mov	r0, r6
 8004a84:	4639      	mov	r1, r7
 8004a86:	f7fc f829 	bl	8000adc <__aeabi_dcmplt>
 8004a8a:	b148      	cbz	r0, 8004aa0 <_dtoa_r+0x190>
 8004a8c:	4658      	mov	r0, fp
 8004a8e:	f7fb fd49 	bl	8000524 <__aeabi_i2d>
 8004a92:	4632      	mov	r2, r6
 8004a94:	463b      	mov	r3, r7
 8004a96:	f7fc f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a9a:	b908      	cbnz	r0, 8004aa0 <_dtoa_r+0x190>
 8004a9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004aa0:	f1bb 0f16 	cmp.w	fp, #22
 8004aa4:	d857      	bhi.n	8004b56 <_dtoa_r+0x246>
 8004aa6:	4b5b      	ldr	r3, [pc, #364]	; (8004c14 <_dtoa_r+0x304>)
 8004aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	ec51 0b18 	vmov	r0, r1, d8
 8004ab4:	f7fc f812 	bl	8000adc <__aeabi_dcmplt>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d04e      	beq.n	8004b5a <_dtoa_r+0x24a>
 8004abc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ac6:	1b5b      	subs	r3, r3, r5
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	bf45      	ittet	mi
 8004acc:	f1c3 0301 	rsbmi	r3, r3, #1
 8004ad0:	9305      	strmi	r3, [sp, #20]
 8004ad2:	2300      	movpl	r3, #0
 8004ad4:	2300      	movmi	r3, #0
 8004ad6:	9206      	str	r2, [sp, #24]
 8004ad8:	bf54      	ite	pl
 8004ada:	9305      	strpl	r3, [sp, #20]
 8004adc:	9306      	strmi	r3, [sp, #24]
 8004ade:	f1bb 0f00 	cmp.w	fp, #0
 8004ae2:	db3c      	blt.n	8004b5e <_dtoa_r+0x24e>
 8004ae4:	9b06      	ldr	r3, [sp, #24]
 8004ae6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004aea:	445b      	add	r3, fp
 8004aec:	9306      	str	r3, [sp, #24]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9308      	str	r3, [sp, #32]
 8004af2:	9b07      	ldr	r3, [sp, #28]
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d868      	bhi.n	8004bca <_dtoa_r+0x2ba>
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	bfc4      	itt	gt
 8004afc:	3b04      	subgt	r3, #4
 8004afe:	9307      	strgt	r3, [sp, #28]
 8004b00:	9b07      	ldr	r3, [sp, #28]
 8004b02:	f1a3 0302 	sub.w	r3, r3, #2
 8004b06:	bfcc      	ite	gt
 8004b08:	2500      	movgt	r5, #0
 8004b0a:	2501      	movle	r5, #1
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	f200 8085 	bhi.w	8004c1c <_dtoa_r+0x30c>
 8004b12:	e8df f003 	tbb	[pc, r3]
 8004b16:	3b2e      	.short	0x3b2e
 8004b18:	5839      	.short	0x5839
 8004b1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004b1e:	441d      	add	r5, r3
 8004b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	bfc1      	itttt	gt
 8004b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004b30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004b34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004b38:	bfd6      	itet	le
 8004b3a:	f1c3 0320 	rsble	r3, r3, #32
 8004b3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004b42:	fa06 f003 	lslle.w	r0, r6, r3
 8004b46:	f7fb fcdd 	bl	8000504 <__aeabi_ui2d>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004b50:	3d01      	subs	r5, #1
 8004b52:	920e      	str	r2, [sp, #56]	; 0x38
 8004b54:	e76f      	b.n	8004a36 <_dtoa_r+0x126>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e7b3      	b.n	8004ac2 <_dtoa_r+0x1b2>
 8004b5a:	900c      	str	r0, [sp, #48]	; 0x30
 8004b5c:	e7b2      	b.n	8004ac4 <_dtoa_r+0x1b4>
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	eba3 030b 	sub.w	r3, r3, fp
 8004b64:	9305      	str	r3, [sp, #20]
 8004b66:	f1cb 0300 	rsb	r3, fp, #0
 8004b6a:	9308      	str	r3, [sp, #32]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b70:	e7bf      	b.n	8004af2 <_dtoa_r+0x1e2>
 8004b72:	2300      	movs	r3, #0
 8004b74:	9309      	str	r3, [sp, #36]	; 0x24
 8004b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dc52      	bgt.n	8004c22 <_dtoa_r+0x312>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	9304      	str	r3, [sp, #16]
 8004b82:	461a      	mov	r2, r3
 8004b84:	920a      	str	r2, [sp, #40]	; 0x28
 8004b86:	e00b      	b.n	8004ba0 <_dtoa_r+0x290>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e7f3      	b.n	8004b74 <_dtoa_r+0x264>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b92:	445b      	add	r3, fp
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	bfb8      	it	lt
 8004b9e:	2301      	movlt	r3, #1
 8004ba0:	69e0      	ldr	r0, [r4, #28]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	f102 0614 	add.w	r6, r2, #20
 8004baa:	429e      	cmp	r6, r3
 8004bac:	d93d      	bls.n	8004c2a <_dtoa_r+0x31a>
 8004bae:	6041      	str	r1, [r0, #4]
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fd9f 	bl	80056f4 <_Balloc>
 8004bb6:	9000      	str	r0, [sp, #0]
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d139      	bne.n	8004c30 <_dtoa_r+0x320>
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <_dtoa_r+0x308>)
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f240 11af 	movw	r1, #431	; 0x1af
 8004bc4:	e6bd      	b.n	8004942 <_dtoa_r+0x32>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e7e1      	b.n	8004b8e <_dtoa_r+0x27e>
 8004bca:	2501      	movs	r5, #1
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9307      	str	r3, [sp, #28]
 8004bd0:	9509      	str	r5, [sp, #36]	; 0x24
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	9304      	str	r3, [sp, #16]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2312      	movs	r3, #18
 8004bde:	e7d1      	b.n	8004b84 <_dtoa_r+0x274>
 8004be0:	636f4361 	.word	0x636f4361
 8004be4:	3fd287a7 	.word	0x3fd287a7
 8004be8:	8b60c8b3 	.word	0x8b60c8b3
 8004bec:	3fc68a28 	.word	0x3fc68a28
 8004bf0:	509f79fb 	.word	0x509f79fb
 8004bf4:	3fd34413 	.word	0x3fd34413
 8004bf8:	08006995 	.word	0x08006995
 8004bfc:	080069ac 	.word	0x080069ac
 8004c00:	7ff00000 	.word	0x7ff00000
 8004c04:	08006991 	.word	0x08006991
 8004c08:	08006988 	.word	0x08006988
 8004c0c:	08006965 	.word	0x08006965
 8004c10:	3ff80000 	.word	0x3ff80000
 8004c14:	08006a98 	.word	0x08006a98
 8004c18:	08006a04 	.word	0x08006a04
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c20:	e7d7      	b.n	8004bd2 <_dtoa_r+0x2c2>
 8004c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	e7ba      	b.n	8004ba0 <_dtoa_r+0x290>
 8004c2a:	3101      	adds	r1, #1
 8004c2c:	0052      	lsls	r2, r2, #1
 8004c2e:	e7ba      	b.n	8004ba6 <_dtoa_r+0x296>
 8004c30:	69e3      	ldr	r3, [r4, #28]
 8004c32:	9a00      	ldr	r2, [sp, #0]
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	9b04      	ldr	r3, [sp, #16]
 8004c38:	2b0e      	cmp	r3, #14
 8004c3a:	f200 80a8 	bhi.w	8004d8e <_dtoa_r+0x47e>
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	f000 80a5 	beq.w	8004d8e <_dtoa_r+0x47e>
 8004c44:	f1bb 0f00 	cmp.w	fp, #0
 8004c48:	dd38      	ble.n	8004cbc <_dtoa_r+0x3ac>
 8004c4a:	4bc0      	ldr	r3, [pc, #768]	; (8004f4c <_dtoa_r+0x63c>)
 8004c4c:	f00b 020f 	and.w	r2, fp, #15
 8004c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004c58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004c5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004c60:	d019      	beq.n	8004c96 <_dtoa_r+0x386>
 8004c62:	4bbb      	ldr	r3, [pc, #748]	; (8004f50 <_dtoa_r+0x640>)
 8004c64:	ec51 0b18 	vmov	r0, r1, d8
 8004c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c6c:	f7fb fdee 	bl	800084c <__aeabi_ddiv>
 8004c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c74:	f008 080f 	and.w	r8, r8, #15
 8004c78:	2503      	movs	r5, #3
 8004c7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004f50 <_dtoa_r+0x640>
 8004c7e:	f1b8 0f00 	cmp.w	r8, #0
 8004c82:	d10a      	bne.n	8004c9a <_dtoa_r+0x38a>
 8004c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c88:	4632      	mov	r2, r6
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	f7fb fdde 	bl	800084c <__aeabi_ddiv>
 8004c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c94:	e02b      	b.n	8004cee <_dtoa_r+0x3de>
 8004c96:	2502      	movs	r5, #2
 8004c98:	e7ef      	b.n	8004c7a <_dtoa_r+0x36a>
 8004c9a:	f018 0f01 	tst.w	r8, #1
 8004c9e:	d008      	beq.n	8004cb2 <_dtoa_r+0x3a2>
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004ca8:	f7fb fca6 	bl	80005f8 <__aeabi_dmul>
 8004cac:	3501      	adds	r5, #1
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004cb6:	f109 0908 	add.w	r9, r9, #8
 8004cba:	e7e0      	b.n	8004c7e <_dtoa_r+0x36e>
 8004cbc:	f000 809f 	beq.w	8004dfe <_dtoa_r+0x4ee>
 8004cc0:	f1cb 0600 	rsb	r6, fp, #0
 8004cc4:	4ba1      	ldr	r3, [pc, #644]	; (8004f4c <_dtoa_r+0x63c>)
 8004cc6:	4fa2      	ldr	r7, [pc, #648]	; (8004f50 <_dtoa_r+0x640>)
 8004cc8:	f006 020f 	and.w	r2, r6, #15
 8004ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	ec51 0b18 	vmov	r0, r1, d8
 8004cd8:	f7fb fc8e 	bl	80005f8 <__aeabi_dmul>
 8004cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ce0:	1136      	asrs	r6, r6, #4
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2502      	movs	r5, #2
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	d17e      	bne.n	8004de8 <_dtoa_r+0x4d8>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1d0      	bne.n	8004c90 <_dtoa_r+0x380>
 8004cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8084 	beq.w	8004e02 <_dtoa_r+0x4f2>
 8004cfa:	4b96      	ldr	r3, [pc, #600]	; (8004f54 <_dtoa_r+0x644>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f7fb feeb 	bl	8000adc <__aeabi_dcmplt>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d07b      	beq.n	8004e02 <_dtoa_r+0x4f2>
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d078      	beq.n	8004e02 <_dtoa_r+0x4f2>
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dd39      	ble.n	8004d8a <_dtoa_r+0x47a>
 8004d16:	4b90      	ldr	r3, [pc, #576]	; (8004f58 <_dtoa_r+0x648>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fc6b 	bl	80005f8 <__aeabi_dmul>
 8004d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d26:	9e01      	ldr	r6, [sp, #4]
 8004d28:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004d32:	4628      	mov	r0, r5
 8004d34:	f7fb fbf6 	bl	8000524 <__aeabi_i2d>
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <_dtoa_r+0x64c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	f7fb faa2 	bl	800028c <__adddf3>
 8004d48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	d158      	bne.n	8004e08 <_dtoa_r+0x4f8>
 8004d56:	4b82      	ldr	r3, [pc, #520]	; (8004f60 <_dtoa_r+0x650>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f7fb fa93 	bl	8000288 <__aeabi_dsub>
 8004d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d66:	4680      	mov	r8, r0
 8004d68:	4689      	mov	r9, r1
 8004d6a:	f7fb fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f040 8296 	bne.w	80052a0 <_dtoa_r+0x990>
 8004d74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004d78:	4640      	mov	r0, r8
 8004d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d7e:	4649      	mov	r1, r9
 8004d80:	f7fb feac 	bl	8000adc <__aeabi_dcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f040 8289 	bne.w	800529c <_dtoa_r+0x98c>
 8004d8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f2c0 814e 	blt.w	8005032 <_dtoa_r+0x722>
 8004d96:	f1bb 0f0e 	cmp.w	fp, #14
 8004d9a:	f300 814a 	bgt.w	8005032 <_dtoa_r+0x722>
 8004d9e:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <_dtoa_r+0x63c>)
 8004da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f280 80dc 	bge.w	8004f68 <_dtoa_r+0x658>
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f300 80d8 	bgt.w	8004f68 <_dtoa_r+0x658>
 8004db8:	f040 826f 	bne.w	800529a <_dtoa_r+0x98a>
 8004dbc:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <_dtoa_r+0x650>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	f7fb fc18 	bl	80005f8 <__aeabi_dmul>
 8004dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dcc:	f7fb fe9a 	bl	8000b04 <__aeabi_dcmpge>
 8004dd0:	9e04      	ldr	r6, [sp, #16]
 8004dd2:	4637      	mov	r7, r6
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f040 8245 	bne.w	8005264 <_dtoa_r+0x954>
 8004dda:	9d00      	ldr	r5, [sp, #0]
 8004ddc:	2331      	movs	r3, #49	; 0x31
 8004dde:	f805 3b01 	strb.w	r3, [r5], #1
 8004de2:	f10b 0b01 	add.w	fp, fp, #1
 8004de6:	e241      	b.n	800526c <_dtoa_r+0x95c>
 8004de8:	07f2      	lsls	r2, r6, #31
 8004dea:	d505      	bpl.n	8004df8 <_dtoa_r+0x4e8>
 8004dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df0:	f7fb fc02 	bl	80005f8 <__aeabi_dmul>
 8004df4:	3501      	adds	r5, #1
 8004df6:	2301      	movs	r3, #1
 8004df8:	1076      	asrs	r6, r6, #1
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	e773      	b.n	8004ce6 <_dtoa_r+0x3d6>
 8004dfe:	2502      	movs	r5, #2
 8004e00:	e775      	b.n	8004cee <_dtoa_r+0x3de>
 8004e02:	9e04      	ldr	r6, [sp, #16]
 8004e04:	465f      	mov	r7, fp
 8004e06:	e792      	b.n	8004d2e <_dtoa_r+0x41e>
 8004e08:	9900      	ldr	r1, [sp, #0]
 8004e0a:	4b50      	ldr	r3, [pc, #320]	; (8004f4c <_dtoa_r+0x63c>)
 8004e0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e10:	4431      	add	r1, r6
 8004e12:	9102      	str	r1, [sp, #8]
 8004e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e16:	eeb0 9a47 	vmov.f32	s18, s14
 8004e1a:	eef0 9a67 	vmov.f32	s19, s15
 8004e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d044      	beq.n	8004eb4 <_dtoa_r+0x5a4>
 8004e2a:	494e      	ldr	r1, [pc, #312]	; (8004f64 <_dtoa_r+0x654>)
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fb fd0d 	bl	800084c <__aeabi_ddiv>
 8004e32:	ec53 2b19 	vmov	r2, r3, d9
 8004e36:	f7fb fa27 	bl	8000288 <__aeabi_dsub>
 8004e3a:	9d00      	ldr	r5, [sp, #0]
 8004e3c:	ec41 0b19 	vmov	d9, r0, r1
 8004e40:	4649      	mov	r1, r9
 8004e42:	4640      	mov	r0, r8
 8004e44:	f7fb fe88 	bl	8000b58 <__aeabi_d2iz>
 8004e48:	4606      	mov	r6, r0
 8004e4a:	f7fb fb6b 	bl	8000524 <__aeabi_i2d>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4640      	mov	r0, r8
 8004e54:	4649      	mov	r1, r9
 8004e56:	f7fb fa17 	bl	8000288 <__aeabi_dsub>
 8004e5a:	3630      	adds	r6, #48	; 0x30
 8004e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8004e60:	ec53 2b19 	vmov	r2, r3, d9
 8004e64:	4680      	mov	r8, r0
 8004e66:	4689      	mov	r9, r1
 8004e68:	f7fb fe38 	bl	8000adc <__aeabi_dcmplt>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d164      	bne.n	8004f3a <_dtoa_r+0x62a>
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	4937      	ldr	r1, [pc, #220]	; (8004f54 <_dtoa_r+0x644>)
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fb fa06 	bl	8000288 <__aeabi_dsub>
 8004e7c:	ec53 2b19 	vmov	r2, r3, d9
 8004e80:	f7fb fe2c 	bl	8000adc <__aeabi_dcmplt>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	f040 80b6 	bne.w	8004ff6 <_dtoa_r+0x6e6>
 8004e8a:	9b02      	ldr	r3, [sp, #8]
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	f43f af7c 	beq.w	8004d8a <_dtoa_r+0x47a>
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <_dtoa_r+0x648>)
 8004e94:	ec51 0b19 	vmov	r0, r1, d9
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f7fb fbad 	bl	80005f8 <__aeabi_dmul>
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <_dtoa_r+0x648>)
 8004ea0:	ec41 0b19 	vmov	d9, r0, r1
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	f7fb fba5 	bl	80005f8 <__aeabi_dmul>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	4689      	mov	r9, r1
 8004eb2:	e7c5      	b.n	8004e40 <_dtoa_r+0x530>
 8004eb4:	ec51 0b17 	vmov	r0, r1, d7
 8004eb8:	f7fb fb9e 	bl	80005f8 <__aeabi_dmul>
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	9d00      	ldr	r5, [sp, #0]
 8004ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec2:	ec41 0b19 	vmov	d9, r0, r1
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4640      	mov	r0, r8
 8004eca:	f7fb fe45 	bl	8000b58 <__aeabi_d2iz>
 8004ece:	4606      	mov	r6, r0
 8004ed0:	f7fb fb28 	bl	8000524 <__aeabi_i2d>
 8004ed4:	3630      	adds	r6, #48	; 0x30
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4640      	mov	r0, r8
 8004edc:	4649      	mov	r1, r9
 8004ede:	f7fb f9d3 	bl	8000288 <__aeabi_dsub>
 8004ee2:	f805 6b01 	strb.w	r6, [r5], #1
 8004ee6:	9b02      	ldr	r3, [sp, #8]
 8004ee8:	429d      	cmp	r5, r3
 8004eea:	4680      	mov	r8, r0
 8004eec:	4689      	mov	r9, r1
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	d124      	bne.n	8004f3e <_dtoa_r+0x62e>
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <_dtoa_r+0x654>)
 8004ef6:	ec51 0b19 	vmov	r0, r1, d9
 8004efa:	f7fb f9c7 	bl	800028c <__adddf3>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb fe07 	bl	8000b18 <__aeabi_dcmpgt>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d173      	bne.n	8004ff6 <_dtoa_r+0x6e6>
 8004f0e:	ec53 2b19 	vmov	r2, r3, d9
 8004f12:	4914      	ldr	r1, [pc, #80]	; (8004f64 <_dtoa_r+0x654>)
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fb f9b7 	bl	8000288 <__aeabi_dsub>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4640      	mov	r0, r8
 8004f20:	4649      	mov	r1, r9
 8004f22:	f7fb fddb 	bl	8000adc <__aeabi_dcmplt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f43f af2f 	beq.w	8004d8a <_dtoa_r+0x47a>
 8004f2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f2e:	1e6b      	subs	r3, r5, #1
 8004f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f36:	2b30      	cmp	r3, #48	; 0x30
 8004f38:	d0f8      	beq.n	8004f2c <_dtoa_r+0x61c>
 8004f3a:	46bb      	mov	fp, r7
 8004f3c:	e04a      	b.n	8004fd4 <_dtoa_r+0x6c4>
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <_dtoa_r+0x648>)
 8004f40:	f7fb fb5a 	bl	80005f8 <__aeabi_dmul>
 8004f44:	4680      	mov	r8, r0
 8004f46:	4689      	mov	r9, r1
 8004f48:	e7bd      	b.n	8004ec6 <_dtoa_r+0x5b6>
 8004f4a:	bf00      	nop
 8004f4c:	08006a98 	.word	0x08006a98
 8004f50:	08006a70 	.word	0x08006a70
 8004f54:	3ff00000 	.word	0x3ff00000
 8004f58:	40240000 	.word	0x40240000
 8004f5c:	401c0000 	.word	0x401c0000
 8004f60:	40140000 	.word	0x40140000
 8004f64:	3fe00000 	.word	0x3fe00000
 8004f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f6c:	9d00      	ldr	r5, [sp, #0]
 8004f6e:	4642      	mov	r2, r8
 8004f70:	464b      	mov	r3, r9
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb fc69 	bl	800084c <__aeabi_ddiv>
 8004f7a:	f7fb fded 	bl	8000b58 <__aeabi_d2iz>
 8004f7e:	9001      	str	r0, [sp, #4]
 8004f80:	f7fb fad0 	bl	8000524 <__aeabi_i2d>
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	f7fb fb36 	bl	80005f8 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4630      	mov	r0, r6
 8004f92:	4639      	mov	r1, r7
 8004f94:	f7fb f978 	bl	8000288 <__aeabi_dsub>
 8004f98:	9e01      	ldr	r6, [sp, #4]
 8004f9a:	9f04      	ldr	r7, [sp, #16]
 8004f9c:	3630      	adds	r6, #48	; 0x30
 8004f9e:	f805 6b01 	strb.w	r6, [r5], #1
 8004fa2:	9e00      	ldr	r6, [sp, #0]
 8004fa4:	1bae      	subs	r6, r5, r6
 8004fa6:	42b7      	cmp	r7, r6
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	d134      	bne.n	8005018 <_dtoa_r+0x708>
 8004fae:	f7fb f96d 	bl	800028c <__adddf3>
 8004fb2:	4642      	mov	r2, r8
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	f7fb fdad 	bl	8000b18 <__aeabi_dcmpgt>
 8004fbe:	b9c8      	cbnz	r0, 8004ff4 <_dtoa_r+0x6e4>
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	f7fb fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fcc:	b110      	cbz	r0, 8004fd4 <_dtoa_r+0x6c4>
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d40f      	bmi.n	8004ff4 <_dtoa_r+0x6e4>
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f000 fbcc 	bl	8005774 <_Bfree>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fe0:	702b      	strb	r3, [r5, #0]
 8004fe2:	f10b 0301 	add.w	r3, fp, #1
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f43f ace2 	beq.w	80049b4 <_dtoa_r+0xa4>
 8004ff0:	601d      	str	r5, [r3, #0]
 8004ff2:	e4df      	b.n	80049b4 <_dtoa_r+0xa4>
 8004ff4:	465f      	mov	r7, fp
 8004ff6:	462b      	mov	r3, r5
 8004ff8:	461d      	mov	r5, r3
 8004ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ffe:	2a39      	cmp	r2, #57	; 0x39
 8005000:	d106      	bne.n	8005010 <_dtoa_r+0x700>
 8005002:	9a00      	ldr	r2, [sp, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d1f7      	bne.n	8004ff8 <_dtoa_r+0x6e8>
 8005008:	9900      	ldr	r1, [sp, #0]
 800500a:	2230      	movs	r2, #48	; 0x30
 800500c:	3701      	adds	r7, #1
 800500e:	700a      	strb	r2, [r1, #0]
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	3201      	adds	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e790      	b.n	8004f3a <_dtoa_r+0x62a>
 8005018:	4ba3      	ldr	r3, [pc, #652]	; (80052a8 <_dtoa_r+0x998>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb faec 	bl	80005f8 <__aeabi_dmul>
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4606      	mov	r6, r0
 8005026:	460f      	mov	r7, r1
 8005028:	f7fb fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800502c:	2800      	cmp	r0, #0
 800502e:	d09e      	beq.n	8004f6e <_dtoa_r+0x65e>
 8005030:	e7d0      	b.n	8004fd4 <_dtoa_r+0x6c4>
 8005032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005034:	2a00      	cmp	r2, #0
 8005036:	f000 80ca 	beq.w	80051ce <_dtoa_r+0x8be>
 800503a:	9a07      	ldr	r2, [sp, #28]
 800503c:	2a01      	cmp	r2, #1
 800503e:	f300 80ad 	bgt.w	800519c <_dtoa_r+0x88c>
 8005042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005044:	2a00      	cmp	r2, #0
 8005046:	f000 80a5 	beq.w	8005194 <_dtoa_r+0x884>
 800504a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800504e:	9e08      	ldr	r6, [sp, #32]
 8005050:	9d05      	ldr	r5, [sp, #20]
 8005052:	9a05      	ldr	r2, [sp, #20]
 8005054:	441a      	add	r2, r3
 8005056:	9205      	str	r2, [sp, #20]
 8005058:	9a06      	ldr	r2, [sp, #24]
 800505a:	2101      	movs	r1, #1
 800505c:	441a      	add	r2, r3
 800505e:	4620      	mov	r0, r4
 8005060:	9206      	str	r2, [sp, #24]
 8005062:	f000 fc3d 	bl	80058e0 <__i2b>
 8005066:	4607      	mov	r7, r0
 8005068:	b165      	cbz	r5, 8005084 <_dtoa_r+0x774>
 800506a:	9b06      	ldr	r3, [sp, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dd09      	ble.n	8005084 <_dtoa_r+0x774>
 8005070:	42ab      	cmp	r3, r5
 8005072:	9a05      	ldr	r2, [sp, #20]
 8005074:	bfa8      	it	ge
 8005076:	462b      	movge	r3, r5
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	9205      	str	r2, [sp, #20]
 800507c:	9a06      	ldr	r2, [sp, #24]
 800507e:	1aed      	subs	r5, r5, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	9306      	str	r3, [sp, #24]
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	b1f3      	cbz	r3, 80050c6 <_dtoa_r+0x7b6>
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80a3 	beq.w	80051d6 <_dtoa_r+0x8c6>
 8005090:	2e00      	cmp	r6, #0
 8005092:	dd10      	ble.n	80050b6 <_dtoa_r+0x7a6>
 8005094:	4639      	mov	r1, r7
 8005096:	4632      	mov	r2, r6
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fce1 	bl	8005a60 <__pow5mult>
 800509e:	4652      	mov	r2, sl
 80050a0:	4601      	mov	r1, r0
 80050a2:	4607      	mov	r7, r0
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 fc31 	bl	800590c <__multiply>
 80050aa:	4651      	mov	r1, sl
 80050ac:	4680      	mov	r8, r0
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 fb60 	bl	8005774 <_Bfree>
 80050b4:	46c2      	mov	sl, r8
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	1b9a      	subs	r2, r3, r6
 80050ba:	d004      	beq.n	80050c6 <_dtoa_r+0x7b6>
 80050bc:	4651      	mov	r1, sl
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fcce 	bl	8005a60 <__pow5mult>
 80050c4:	4682      	mov	sl, r0
 80050c6:	2101      	movs	r1, #1
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 fc09 	bl	80058e0 <__i2b>
 80050ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	4606      	mov	r6, r0
 80050d4:	f340 8081 	ble.w	80051da <_dtoa_r+0x8ca>
 80050d8:	461a      	mov	r2, r3
 80050da:	4601      	mov	r1, r0
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 fcbf 	bl	8005a60 <__pow5mult>
 80050e2:	9b07      	ldr	r3, [sp, #28]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	4606      	mov	r6, r0
 80050e8:	dd7a      	ble.n	80051e0 <_dtoa_r+0x8d0>
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	6933      	ldr	r3, [r6, #16]
 80050f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80050f4:	6918      	ldr	r0, [r3, #16]
 80050f6:	f000 fba5 	bl	8005844 <__hi0bits>
 80050fa:	f1c0 0020 	rsb	r0, r0, #32
 80050fe:	9b06      	ldr	r3, [sp, #24]
 8005100:	4418      	add	r0, r3
 8005102:	f010 001f 	ands.w	r0, r0, #31
 8005106:	f000 8094 	beq.w	8005232 <_dtoa_r+0x922>
 800510a:	f1c0 0320 	rsb	r3, r0, #32
 800510e:	2b04      	cmp	r3, #4
 8005110:	f340 8085 	ble.w	800521e <_dtoa_r+0x90e>
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	f1c0 001c 	rsb	r0, r0, #28
 800511a:	4403      	add	r3, r0
 800511c:	9305      	str	r3, [sp, #20]
 800511e:	9b06      	ldr	r3, [sp, #24]
 8005120:	4403      	add	r3, r0
 8005122:	4405      	add	r5, r0
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	9b05      	ldr	r3, [sp, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dd05      	ble.n	8005138 <_dtoa_r+0x828>
 800512c:	4651      	mov	r1, sl
 800512e:	461a      	mov	r2, r3
 8005130:	4620      	mov	r0, r4
 8005132:	f000 fcef 	bl	8005b14 <__lshift>
 8005136:	4682      	mov	sl, r0
 8005138:	9b06      	ldr	r3, [sp, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	dd05      	ble.n	800514a <_dtoa_r+0x83a>
 800513e:	4631      	mov	r1, r6
 8005140:	461a      	mov	r2, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f000 fce6 	bl	8005b14 <__lshift>
 8005148:	4606      	mov	r6, r0
 800514a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800514c:	2b00      	cmp	r3, #0
 800514e:	d072      	beq.n	8005236 <_dtoa_r+0x926>
 8005150:	4631      	mov	r1, r6
 8005152:	4650      	mov	r0, sl
 8005154:	f000 fd4a 	bl	8005bec <__mcmp>
 8005158:	2800      	cmp	r0, #0
 800515a:	da6c      	bge.n	8005236 <_dtoa_r+0x926>
 800515c:	2300      	movs	r3, #0
 800515e:	4651      	mov	r1, sl
 8005160:	220a      	movs	r2, #10
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fb28 	bl	80057b8 <__multadd>
 8005168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800516e:	4682      	mov	sl, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 81b0 	beq.w	80054d6 <_dtoa_r+0xbc6>
 8005176:	2300      	movs	r3, #0
 8005178:	4639      	mov	r1, r7
 800517a:	220a      	movs	r2, #10
 800517c:	4620      	mov	r0, r4
 800517e:	f000 fb1b 	bl	80057b8 <__multadd>
 8005182:	9b01      	ldr	r3, [sp, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	4607      	mov	r7, r0
 8005188:	f300 8096 	bgt.w	80052b8 <_dtoa_r+0x9a8>
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	2b02      	cmp	r3, #2
 8005190:	dc59      	bgt.n	8005246 <_dtoa_r+0x936>
 8005192:	e091      	b.n	80052b8 <_dtoa_r+0x9a8>
 8005194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800519a:	e758      	b.n	800504e <_dtoa_r+0x73e>
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	1e5e      	subs	r6, r3, #1
 80051a0:	9b08      	ldr	r3, [sp, #32]
 80051a2:	42b3      	cmp	r3, r6
 80051a4:	bfbf      	itttt	lt
 80051a6:	9b08      	ldrlt	r3, [sp, #32]
 80051a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80051aa:	9608      	strlt	r6, [sp, #32]
 80051ac:	1af3      	sublt	r3, r6, r3
 80051ae:	bfb4      	ite	lt
 80051b0:	18d2      	addlt	r2, r2, r3
 80051b2:	1b9e      	subge	r6, r3, r6
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	bfbc      	itt	lt
 80051b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80051ba:	2600      	movlt	r6, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfb7      	itett	lt
 80051c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80051c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80051c8:	1a9d      	sublt	r5, r3, r2
 80051ca:	2300      	movlt	r3, #0
 80051cc:	e741      	b.n	8005052 <_dtoa_r+0x742>
 80051ce:	9e08      	ldr	r6, [sp, #32]
 80051d0:	9d05      	ldr	r5, [sp, #20]
 80051d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80051d4:	e748      	b.n	8005068 <_dtoa_r+0x758>
 80051d6:	9a08      	ldr	r2, [sp, #32]
 80051d8:	e770      	b.n	80050bc <_dtoa_r+0x7ac>
 80051da:	9b07      	ldr	r3, [sp, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	dc19      	bgt.n	8005214 <_dtoa_r+0x904>
 80051e0:	9b02      	ldr	r3, [sp, #8]
 80051e2:	b9bb      	cbnz	r3, 8005214 <_dtoa_r+0x904>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ea:	b99b      	cbnz	r3, 8005214 <_dtoa_r+0x904>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	0d1b      	lsrs	r3, r3, #20
 80051f4:	051b      	lsls	r3, r3, #20
 80051f6:	b183      	cbz	r3, 800521a <_dtoa_r+0x90a>
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	3301      	adds	r3, #1
 80051fc:	9305      	str	r3, [sp, #20]
 80051fe:	9b06      	ldr	r3, [sp, #24]
 8005200:	3301      	adds	r3, #1
 8005202:	9306      	str	r3, [sp, #24]
 8005204:	f04f 0801 	mov.w	r8, #1
 8005208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520a:	2b00      	cmp	r3, #0
 800520c:	f47f af6f 	bne.w	80050ee <_dtoa_r+0x7de>
 8005210:	2001      	movs	r0, #1
 8005212:	e774      	b.n	80050fe <_dtoa_r+0x7ee>
 8005214:	f04f 0800 	mov.w	r8, #0
 8005218:	e7f6      	b.n	8005208 <_dtoa_r+0x8f8>
 800521a:	4698      	mov	r8, r3
 800521c:	e7f4      	b.n	8005208 <_dtoa_r+0x8f8>
 800521e:	d082      	beq.n	8005126 <_dtoa_r+0x816>
 8005220:	9a05      	ldr	r2, [sp, #20]
 8005222:	331c      	adds	r3, #28
 8005224:	441a      	add	r2, r3
 8005226:	9205      	str	r2, [sp, #20]
 8005228:	9a06      	ldr	r2, [sp, #24]
 800522a:	441a      	add	r2, r3
 800522c:	441d      	add	r5, r3
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	e779      	b.n	8005126 <_dtoa_r+0x816>
 8005232:	4603      	mov	r3, r0
 8005234:	e7f4      	b.n	8005220 <_dtoa_r+0x910>
 8005236:	9b04      	ldr	r3, [sp, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc37      	bgt.n	80052ac <_dtoa_r+0x99c>
 800523c:	9b07      	ldr	r3, [sp, #28]
 800523e:	2b02      	cmp	r3, #2
 8005240:	dd34      	ble.n	80052ac <_dtoa_r+0x99c>
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	b963      	cbnz	r3, 8005264 <_dtoa_r+0x954>
 800524a:	4631      	mov	r1, r6
 800524c:	2205      	movs	r2, #5
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fab2 	bl	80057b8 <__multadd>
 8005254:	4601      	mov	r1, r0
 8005256:	4606      	mov	r6, r0
 8005258:	4650      	mov	r0, sl
 800525a:	f000 fcc7 	bl	8005bec <__mcmp>
 800525e:	2800      	cmp	r0, #0
 8005260:	f73f adbb 	bgt.w	8004dda <_dtoa_r+0x4ca>
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	9d00      	ldr	r5, [sp, #0]
 8005268:	ea6f 0b03 	mvn.w	fp, r3
 800526c:	f04f 0800 	mov.w	r8, #0
 8005270:	4631      	mov	r1, r6
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fa7e 	bl	8005774 <_Bfree>
 8005278:	2f00      	cmp	r7, #0
 800527a:	f43f aeab 	beq.w	8004fd4 <_dtoa_r+0x6c4>
 800527e:	f1b8 0f00 	cmp.w	r8, #0
 8005282:	d005      	beq.n	8005290 <_dtoa_r+0x980>
 8005284:	45b8      	cmp	r8, r7
 8005286:	d003      	beq.n	8005290 <_dtoa_r+0x980>
 8005288:	4641      	mov	r1, r8
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fa72 	bl	8005774 <_Bfree>
 8005290:	4639      	mov	r1, r7
 8005292:	4620      	mov	r0, r4
 8005294:	f000 fa6e 	bl	8005774 <_Bfree>
 8005298:	e69c      	b.n	8004fd4 <_dtoa_r+0x6c4>
 800529a:	2600      	movs	r6, #0
 800529c:	4637      	mov	r7, r6
 800529e:	e7e1      	b.n	8005264 <_dtoa_r+0x954>
 80052a0:	46bb      	mov	fp, r7
 80052a2:	4637      	mov	r7, r6
 80052a4:	e599      	b.n	8004dda <_dtoa_r+0x4ca>
 80052a6:	bf00      	nop
 80052a8:	40240000 	.word	0x40240000
 80052ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80c8 	beq.w	8005444 <_dtoa_r+0xb34>
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	dd05      	ble.n	80052c8 <_dtoa_r+0x9b8>
 80052bc:	4639      	mov	r1, r7
 80052be:	462a      	mov	r2, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fc27 	bl	8005b14 <__lshift>
 80052c6:	4607      	mov	r7, r0
 80052c8:	f1b8 0f00 	cmp.w	r8, #0
 80052cc:	d05b      	beq.n	8005386 <_dtoa_r+0xa76>
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fa0f 	bl	80056f4 <_Balloc>
 80052d6:	4605      	mov	r5, r0
 80052d8:	b928      	cbnz	r0, 80052e6 <_dtoa_r+0x9d6>
 80052da:	4b83      	ldr	r3, [pc, #524]	; (80054e8 <_dtoa_r+0xbd8>)
 80052dc:	4602      	mov	r2, r0
 80052de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80052e2:	f7ff bb2e 	b.w	8004942 <_dtoa_r+0x32>
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	3202      	adds	r2, #2
 80052ea:	0092      	lsls	r2, r2, #2
 80052ec:	f107 010c 	add.w	r1, r7, #12
 80052f0:	300c      	adds	r0, #12
 80052f2:	f000 ffab 	bl	800624c <memcpy>
 80052f6:	2201      	movs	r2, #1
 80052f8:	4629      	mov	r1, r5
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fc0a 	bl	8005b14 <__lshift>
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800530a:	4413      	add	r3, r2
 800530c:	9308      	str	r3, [sp, #32]
 800530e:	9b02      	ldr	r3, [sp, #8]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	46b8      	mov	r8, r7
 8005316:	9306      	str	r3, [sp, #24]
 8005318:	4607      	mov	r7, r0
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	4631      	mov	r1, r6
 800531e:	3b01      	subs	r3, #1
 8005320:	4650      	mov	r0, sl
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	f7ff fa69 	bl	80047fa <quorem>
 8005328:	4641      	mov	r1, r8
 800532a:	9002      	str	r0, [sp, #8]
 800532c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005330:	4650      	mov	r0, sl
 8005332:	f000 fc5b 	bl	8005bec <__mcmp>
 8005336:	463a      	mov	r2, r7
 8005338:	9005      	str	r0, [sp, #20]
 800533a:	4631      	mov	r1, r6
 800533c:	4620      	mov	r0, r4
 800533e:	f000 fc71 	bl	8005c24 <__mdiff>
 8005342:	68c2      	ldr	r2, [r0, #12]
 8005344:	4605      	mov	r5, r0
 8005346:	bb02      	cbnz	r2, 800538a <_dtoa_r+0xa7a>
 8005348:	4601      	mov	r1, r0
 800534a:	4650      	mov	r0, sl
 800534c:	f000 fc4e 	bl	8005bec <__mcmp>
 8005350:	4602      	mov	r2, r0
 8005352:	4629      	mov	r1, r5
 8005354:	4620      	mov	r0, r4
 8005356:	9209      	str	r2, [sp, #36]	; 0x24
 8005358:	f000 fa0c 	bl	8005774 <_Bfree>
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005360:	9d04      	ldr	r5, [sp, #16]
 8005362:	ea43 0102 	orr.w	r1, r3, r2
 8005366:	9b06      	ldr	r3, [sp, #24]
 8005368:	4319      	orrs	r1, r3
 800536a:	d110      	bne.n	800538e <_dtoa_r+0xa7e>
 800536c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005370:	d029      	beq.n	80053c6 <_dtoa_r+0xab6>
 8005372:	9b05      	ldr	r3, [sp, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dd02      	ble.n	800537e <_dtoa_r+0xa6e>
 8005378:	9b02      	ldr	r3, [sp, #8]
 800537a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	f883 9000 	strb.w	r9, [r3]
 8005384:	e774      	b.n	8005270 <_dtoa_r+0x960>
 8005386:	4638      	mov	r0, r7
 8005388:	e7ba      	b.n	8005300 <_dtoa_r+0x9f0>
 800538a:	2201      	movs	r2, #1
 800538c:	e7e1      	b.n	8005352 <_dtoa_r+0xa42>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db04      	blt.n	800539e <_dtoa_r+0xa8e>
 8005394:	9907      	ldr	r1, [sp, #28]
 8005396:	430b      	orrs	r3, r1
 8005398:	9906      	ldr	r1, [sp, #24]
 800539a:	430b      	orrs	r3, r1
 800539c:	d120      	bne.n	80053e0 <_dtoa_r+0xad0>
 800539e:	2a00      	cmp	r2, #0
 80053a0:	dded      	ble.n	800537e <_dtoa_r+0xa6e>
 80053a2:	4651      	mov	r1, sl
 80053a4:	2201      	movs	r2, #1
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fbb4 	bl	8005b14 <__lshift>
 80053ac:	4631      	mov	r1, r6
 80053ae:	4682      	mov	sl, r0
 80053b0:	f000 fc1c 	bl	8005bec <__mcmp>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	dc03      	bgt.n	80053c0 <_dtoa_r+0xab0>
 80053b8:	d1e1      	bne.n	800537e <_dtoa_r+0xa6e>
 80053ba:	f019 0f01 	tst.w	r9, #1
 80053be:	d0de      	beq.n	800537e <_dtoa_r+0xa6e>
 80053c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053c4:	d1d8      	bne.n	8005378 <_dtoa_r+0xa68>
 80053c6:	9a01      	ldr	r2, [sp, #4]
 80053c8:	2339      	movs	r3, #57	; 0x39
 80053ca:	7013      	strb	r3, [r2, #0]
 80053cc:	462b      	mov	r3, r5
 80053ce:	461d      	mov	r5, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053d6:	2a39      	cmp	r2, #57	; 0x39
 80053d8:	d06c      	beq.n	80054b4 <_dtoa_r+0xba4>
 80053da:	3201      	adds	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e747      	b.n	8005270 <_dtoa_r+0x960>
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	dd07      	ble.n	80053f4 <_dtoa_r+0xae4>
 80053e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053e8:	d0ed      	beq.n	80053c6 <_dtoa_r+0xab6>
 80053ea:	9a01      	ldr	r2, [sp, #4]
 80053ec:	f109 0301 	add.w	r3, r9, #1
 80053f0:	7013      	strb	r3, [r2, #0]
 80053f2:	e73d      	b.n	8005270 <_dtoa_r+0x960>
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	9a08      	ldr	r2, [sp, #32]
 80053f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d043      	beq.n	8005488 <_dtoa_r+0xb78>
 8005400:	4651      	mov	r1, sl
 8005402:	2300      	movs	r3, #0
 8005404:	220a      	movs	r2, #10
 8005406:	4620      	mov	r0, r4
 8005408:	f000 f9d6 	bl	80057b8 <__multadd>
 800540c:	45b8      	cmp	r8, r7
 800540e:	4682      	mov	sl, r0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	f04f 020a 	mov.w	r2, #10
 8005418:	4641      	mov	r1, r8
 800541a:	4620      	mov	r0, r4
 800541c:	d107      	bne.n	800542e <_dtoa_r+0xb1e>
 800541e:	f000 f9cb 	bl	80057b8 <__multadd>
 8005422:	4680      	mov	r8, r0
 8005424:	4607      	mov	r7, r0
 8005426:	9b04      	ldr	r3, [sp, #16]
 8005428:	3301      	adds	r3, #1
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	e775      	b.n	800531a <_dtoa_r+0xa0a>
 800542e:	f000 f9c3 	bl	80057b8 <__multadd>
 8005432:	4639      	mov	r1, r7
 8005434:	4680      	mov	r8, r0
 8005436:	2300      	movs	r3, #0
 8005438:	220a      	movs	r2, #10
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f9bc 	bl	80057b8 <__multadd>
 8005440:	4607      	mov	r7, r0
 8005442:	e7f0      	b.n	8005426 <_dtoa_r+0xb16>
 8005444:	9b04      	ldr	r3, [sp, #16]
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	9d00      	ldr	r5, [sp, #0]
 800544a:	4631      	mov	r1, r6
 800544c:	4650      	mov	r0, sl
 800544e:	f7ff f9d4 	bl	80047fa <quorem>
 8005452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005456:	9b00      	ldr	r3, [sp, #0]
 8005458:	f805 9b01 	strb.w	r9, [r5], #1
 800545c:	1aea      	subs	r2, r5, r3
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	4293      	cmp	r3, r2
 8005462:	dd07      	ble.n	8005474 <_dtoa_r+0xb64>
 8005464:	4651      	mov	r1, sl
 8005466:	2300      	movs	r3, #0
 8005468:	220a      	movs	r2, #10
 800546a:	4620      	mov	r0, r4
 800546c:	f000 f9a4 	bl	80057b8 <__multadd>
 8005470:	4682      	mov	sl, r0
 8005472:	e7ea      	b.n	800544a <_dtoa_r+0xb3a>
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfc8      	it	gt
 800547a:	461d      	movgt	r5, r3
 800547c:	9b00      	ldr	r3, [sp, #0]
 800547e:	bfd8      	it	le
 8005480:	2501      	movle	r5, #1
 8005482:	441d      	add	r5, r3
 8005484:	f04f 0800 	mov.w	r8, #0
 8005488:	4651      	mov	r1, sl
 800548a:	2201      	movs	r2, #1
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fb41 	bl	8005b14 <__lshift>
 8005492:	4631      	mov	r1, r6
 8005494:	4682      	mov	sl, r0
 8005496:	f000 fba9 	bl	8005bec <__mcmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	dc96      	bgt.n	80053cc <_dtoa_r+0xabc>
 800549e:	d102      	bne.n	80054a6 <_dtoa_r+0xb96>
 80054a0:	f019 0f01 	tst.w	r9, #1
 80054a4:	d192      	bne.n	80053cc <_dtoa_r+0xabc>
 80054a6:	462b      	mov	r3, r5
 80054a8:	461d      	mov	r5, r3
 80054aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ae:	2a30      	cmp	r2, #48	; 0x30
 80054b0:	d0fa      	beq.n	80054a8 <_dtoa_r+0xb98>
 80054b2:	e6dd      	b.n	8005270 <_dtoa_r+0x960>
 80054b4:	9a00      	ldr	r2, [sp, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d189      	bne.n	80053ce <_dtoa_r+0xabe>
 80054ba:	f10b 0b01 	add.w	fp, fp, #1
 80054be:	2331      	movs	r3, #49	; 0x31
 80054c0:	e796      	b.n	80053f0 <_dtoa_r+0xae0>
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <_dtoa_r+0xbdc>)
 80054c4:	f7ff ba99 	b.w	80049fa <_dtoa_r+0xea>
 80054c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f47f aa6d 	bne.w	80049aa <_dtoa_r+0x9a>
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_dtoa_r+0xbe0>)
 80054d2:	f7ff ba92 	b.w	80049fa <_dtoa_r+0xea>
 80054d6:	9b01      	ldr	r3, [sp, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dcb5      	bgt.n	8005448 <_dtoa_r+0xb38>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	f73f aeb1 	bgt.w	8005246 <_dtoa_r+0x936>
 80054e4:	e7b0      	b.n	8005448 <_dtoa_r+0xb38>
 80054e6:	bf00      	nop
 80054e8:	08006a04 	.word	0x08006a04
 80054ec:	08006964 	.word	0x08006964
 80054f0:	08006988 	.word	0x08006988

080054f4 <_free_r>:
 80054f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d044      	beq.n	8005584 <_free_r+0x90>
 80054fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fe:	9001      	str	r0, [sp, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f1a1 0404 	sub.w	r4, r1, #4
 8005506:	bfb8      	it	lt
 8005508:	18e4      	addlt	r4, r4, r3
 800550a:	f000 f8e7 	bl	80056dc <__malloc_lock>
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <_free_r+0x94>)
 8005510:	9801      	ldr	r0, [sp, #4]
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	b933      	cbnz	r3, 8005524 <_free_r+0x30>
 8005516:	6063      	str	r3, [r4, #4]
 8005518:	6014      	str	r4, [r2, #0]
 800551a:	b003      	add	sp, #12
 800551c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005520:	f000 b8e2 	b.w	80056e8 <__malloc_unlock>
 8005524:	42a3      	cmp	r3, r4
 8005526:	d908      	bls.n	800553a <_free_r+0x46>
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	1961      	adds	r1, r4, r5
 800552c:	428b      	cmp	r3, r1
 800552e:	bf01      	itttt	eq
 8005530:	6819      	ldreq	r1, [r3, #0]
 8005532:	685b      	ldreq	r3, [r3, #4]
 8005534:	1949      	addeq	r1, r1, r5
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	e7ed      	b.n	8005516 <_free_r+0x22>
 800553a:	461a      	mov	r2, r3
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	b10b      	cbz	r3, 8005544 <_free_r+0x50>
 8005540:	42a3      	cmp	r3, r4
 8005542:	d9fa      	bls.n	800553a <_free_r+0x46>
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	1855      	adds	r5, r2, r1
 8005548:	42a5      	cmp	r5, r4
 800554a:	d10b      	bne.n	8005564 <_free_r+0x70>
 800554c:	6824      	ldr	r4, [r4, #0]
 800554e:	4421      	add	r1, r4
 8005550:	1854      	adds	r4, r2, r1
 8005552:	42a3      	cmp	r3, r4
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	d1e0      	bne.n	800551a <_free_r+0x26>
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6053      	str	r3, [r2, #4]
 800555e:	440c      	add	r4, r1
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	e7da      	b.n	800551a <_free_r+0x26>
 8005564:	d902      	bls.n	800556c <_free_r+0x78>
 8005566:	230c      	movs	r3, #12
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	e7d6      	b.n	800551a <_free_r+0x26>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf04      	itt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	bf04      	itt	eq
 800557c:	1949      	addeq	r1, r1, r5
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	6054      	str	r4, [r2, #4]
 8005582:	e7ca      	b.n	800551a <_free_r+0x26>
 8005584:	b003      	add	sp, #12
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	20000474 	.word	0x20000474

0800558c <malloc>:
 800558c:	4b02      	ldr	r3, [pc, #8]	; (8005598 <malloc+0xc>)
 800558e:	4601      	mov	r1, r0
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f000 b823 	b.w	80055dc <_malloc_r>
 8005596:	bf00      	nop
 8005598:	20000064 	.word	0x20000064

0800559c <sbrk_aligned>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4e0e      	ldr	r6, [pc, #56]	; (80055d8 <sbrk_aligned+0x3c>)
 80055a0:	460c      	mov	r4, r1
 80055a2:	6831      	ldr	r1, [r6, #0]
 80055a4:	4605      	mov	r5, r0
 80055a6:	b911      	cbnz	r1, 80055ae <sbrk_aligned+0x12>
 80055a8:	f000 fe40 	bl	800622c <_sbrk_r>
 80055ac:	6030      	str	r0, [r6, #0]
 80055ae:	4621      	mov	r1, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 fe3b 	bl	800622c <_sbrk_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d00a      	beq.n	80055d0 <sbrk_aligned+0x34>
 80055ba:	1cc4      	adds	r4, r0, #3
 80055bc:	f024 0403 	bic.w	r4, r4, #3
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d007      	beq.n	80055d4 <sbrk_aligned+0x38>
 80055c4:	1a21      	subs	r1, r4, r0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fe30 	bl	800622c <_sbrk_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d101      	bne.n	80055d4 <sbrk_aligned+0x38>
 80055d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055d4:	4620      	mov	r0, r4
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	20000478 	.word	0x20000478

080055dc <_malloc_r>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	1ccd      	adds	r5, r1, #3
 80055e2:	f025 0503 	bic.w	r5, r5, #3
 80055e6:	3508      	adds	r5, #8
 80055e8:	2d0c      	cmp	r5, #12
 80055ea:	bf38      	it	cc
 80055ec:	250c      	movcc	r5, #12
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	4607      	mov	r7, r0
 80055f2:	db01      	blt.n	80055f8 <_malloc_r+0x1c>
 80055f4:	42a9      	cmp	r1, r5
 80055f6:	d905      	bls.n	8005604 <_malloc_r+0x28>
 80055f8:	230c      	movs	r3, #12
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	2600      	movs	r6, #0
 80055fe:	4630      	mov	r0, r6
 8005600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056d8 <_malloc_r+0xfc>
 8005608:	f000 f868 	bl	80056dc <__malloc_lock>
 800560c:	f8d8 3000 	ldr.w	r3, [r8]
 8005610:	461c      	mov	r4, r3
 8005612:	bb5c      	cbnz	r4, 800566c <_malloc_r+0x90>
 8005614:	4629      	mov	r1, r5
 8005616:	4638      	mov	r0, r7
 8005618:	f7ff ffc0 	bl	800559c <sbrk_aligned>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	4604      	mov	r4, r0
 8005620:	d155      	bne.n	80056ce <_malloc_r+0xf2>
 8005622:	f8d8 4000 	ldr.w	r4, [r8]
 8005626:	4626      	mov	r6, r4
 8005628:	2e00      	cmp	r6, #0
 800562a:	d145      	bne.n	80056b8 <_malloc_r+0xdc>
 800562c:	2c00      	cmp	r4, #0
 800562e:	d048      	beq.n	80056c2 <_malloc_r+0xe6>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	4631      	mov	r1, r6
 8005634:	4638      	mov	r0, r7
 8005636:	eb04 0903 	add.w	r9, r4, r3
 800563a:	f000 fdf7 	bl	800622c <_sbrk_r>
 800563e:	4581      	cmp	r9, r0
 8005640:	d13f      	bne.n	80056c2 <_malloc_r+0xe6>
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	1a6d      	subs	r5, r5, r1
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ffa7 	bl	800559c <sbrk_aligned>
 800564e:	3001      	adds	r0, #1
 8005650:	d037      	beq.n	80056c2 <_malloc_r+0xe6>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	442b      	add	r3, r5
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	f8d8 3000 	ldr.w	r3, [r8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d038      	beq.n	80056d2 <_malloc_r+0xf6>
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	42a2      	cmp	r2, r4
 8005664:	d12b      	bne.n	80056be <_malloc_r+0xe2>
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e00f      	b.n	800568c <_malloc_r+0xb0>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	1b52      	subs	r2, r2, r5
 8005670:	d41f      	bmi.n	80056b2 <_malloc_r+0xd6>
 8005672:	2a0b      	cmp	r2, #11
 8005674:	d917      	bls.n	80056a6 <_malloc_r+0xca>
 8005676:	1961      	adds	r1, r4, r5
 8005678:	42a3      	cmp	r3, r4
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	bf18      	it	ne
 800567e:	6059      	strne	r1, [r3, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	bf08      	it	eq
 8005684:	f8c8 1000 	streq.w	r1, [r8]
 8005688:	5162      	str	r2, [r4, r5]
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	4638      	mov	r0, r7
 800568e:	f104 060b 	add.w	r6, r4, #11
 8005692:	f000 f829 	bl	80056e8 <__malloc_unlock>
 8005696:	f026 0607 	bic.w	r6, r6, #7
 800569a:	1d23      	adds	r3, r4, #4
 800569c:	1af2      	subs	r2, r6, r3
 800569e:	d0ae      	beq.n	80055fe <_malloc_r+0x22>
 80056a0:	1b9b      	subs	r3, r3, r6
 80056a2:	50a3      	str	r3, [r4, r2]
 80056a4:	e7ab      	b.n	80055fe <_malloc_r+0x22>
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	6862      	ldr	r2, [r4, #4]
 80056aa:	d1dd      	bne.n	8005668 <_malloc_r+0x8c>
 80056ac:	f8c8 2000 	str.w	r2, [r8]
 80056b0:	e7ec      	b.n	800568c <_malloc_r+0xb0>
 80056b2:	4623      	mov	r3, r4
 80056b4:	6864      	ldr	r4, [r4, #4]
 80056b6:	e7ac      	b.n	8005612 <_malloc_r+0x36>
 80056b8:	4634      	mov	r4, r6
 80056ba:	6876      	ldr	r6, [r6, #4]
 80056bc:	e7b4      	b.n	8005628 <_malloc_r+0x4c>
 80056be:	4613      	mov	r3, r2
 80056c0:	e7cc      	b.n	800565c <_malloc_r+0x80>
 80056c2:	230c      	movs	r3, #12
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4638      	mov	r0, r7
 80056c8:	f000 f80e 	bl	80056e8 <__malloc_unlock>
 80056cc:	e797      	b.n	80055fe <_malloc_r+0x22>
 80056ce:	6025      	str	r5, [r4, #0]
 80056d0:	e7dc      	b.n	800568c <_malloc_r+0xb0>
 80056d2:	605b      	str	r3, [r3, #4]
 80056d4:	deff      	udf	#255	; 0xff
 80056d6:	bf00      	nop
 80056d8:	20000474 	.word	0x20000474

080056dc <__malloc_lock>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__malloc_lock+0x8>)
 80056de:	f7ff b88a 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	20000470 	.word	0x20000470

080056e8 <__malloc_unlock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_unlock+0x8>)
 80056ea:	f7ff b885 	b.w	80047f8 <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	20000470 	.word	0x20000470

080056f4 <_Balloc>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	69c6      	ldr	r6, [r0, #28]
 80056f8:	4604      	mov	r4, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	b976      	cbnz	r6, 800571c <_Balloc+0x28>
 80056fe:	2010      	movs	r0, #16
 8005700:	f7ff ff44 	bl	800558c <malloc>
 8005704:	4602      	mov	r2, r0
 8005706:	61e0      	str	r0, [r4, #28]
 8005708:	b920      	cbnz	r0, 8005714 <_Balloc+0x20>
 800570a:	4b18      	ldr	r3, [pc, #96]	; (800576c <_Balloc+0x78>)
 800570c:	4818      	ldr	r0, [pc, #96]	; (8005770 <_Balloc+0x7c>)
 800570e:	216b      	movs	r1, #107	; 0x6b
 8005710:	f000 fdaa 	bl	8006268 <__assert_func>
 8005714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005718:	6006      	str	r6, [r0, #0]
 800571a:	60c6      	str	r6, [r0, #12]
 800571c:	69e6      	ldr	r6, [r4, #28]
 800571e:	68f3      	ldr	r3, [r6, #12]
 8005720:	b183      	cbz	r3, 8005744 <_Balloc+0x50>
 8005722:	69e3      	ldr	r3, [r4, #28]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800572a:	b9b8      	cbnz	r0, 800575c <_Balloc+0x68>
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f605 	lsl.w	r6, r1, r5
 8005732:	1d72      	adds	r2, r6, #5
 8005734:	0092      	lsls	r2, r2, #2
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fdb4 	bl	80062a4 <_calloc_r>
 800573c:	b160      	cbz	r0, 8005758 <_Balloc+0x64>
 800573e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005742:	e00e      	b.n	8005762 <_Balloc+0x6e>
 8005744:	2221      	movs	r2, #33	; 0x21
 8005746:	2104      	movs	r1, #4
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fdab 	bl	80062a4 <_calloc_r>
 800574e:	69e3      	ldr	r3, [r4, #28]
 8005750:	60f0      	str	r0, [r6, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e4      	bne.n	8005722 <_Balloc+0x2e>
 8005758:	2000      	movs	r0, #0
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	6802      	ldr	r2, [r0, #0]
 800575e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005762:	2300      	movs	r3, #0
 8005764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005768:	e7f7      	b.n	800575a <_Balloc+0x66>
 800576a:	bf00      	nop
 800576c:	08006995 	.word	0x08006995
 8005770:	08006a15 	.word	0x08006a15

08005774 <_Bfree>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	69c6      	ldr	r6, [r0, #28]
 8005778:	4605      	mov	r5, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b976      	cbnz	r6, 800579c <_Bfree+0x28>
 800577e:	2010      	movs	r0, #16
 8005780:	f7ff ff04 	bl	800558c <malloc>
 8005784:	4602      	mov	r2, r0
 8005786:	61e8      	str	r0, [r5, #28]
 8005788:	b920      	cbnz	r0, 8005794 <_Bfree+0x20>
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <_Bfree+0x3c>)
 800578c:	4809      	ldr	r0, [pc, #36]	; (80057b4 <_Bfree+0x40>)
 800578e:	218f      	movs	r1, #143	; 0x8f
 8005790:	f000 fd6a 	bl	8006268 <__assert_func>
 8005794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005798:	6006      	str	r6, [r0, #0]
 800579a:	60c6      	str	r6, [r0, #12]
 800579c:	b13c      	cbz	r4, 80057ae <_Bfree+0x3a>
 800579e:	69eb      	ldr	r3, [r5, #28]
 80057a0:	6862      	ldr	r2, [r4, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a8:	6021      	str	r1, [r4, #0]
 80057aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	08006995 	.word	0x08006995
 80057b4:	08006a15 	.word	0x08006a15

080057b8 <__multadd>:
 80057b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057bc:	690d      	ldr	r5, [r1, #16]
 80057be:	4607      	mov	r7, r0
 80057c0:	460c      	mov	r4, r1
 80057c2:	461e      	mov	r6, r3
 80057c4:	f101 0c14 	add.w	ip, r1, #20
 80057c8:	2000      	movs	r0, #0
 80057ca:	f8dc 3000 	ldr.w	r3, [ip]
 80057ce:	b299      	uxth	r1, r3
 80057d0:	fb02 6101 	mla	r1, r2, r1, r6
 80057d4:	0c1e      	lsrs	r6, r3, #16
 80057d6:	0c0b      	lsrs	r3, r1, #16
 80057d8:	fb02 3306 	mla	r3, r2, r6, r3
 80057dc:	b289      	uxth	r1, r1
 80057de:	3001      	adds	r0, #1
 80057e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057e4:	4285      	cmp	r5, r0
 80057e6:	f84c 1b04 	str.w	r1, [ip], #4
 80057ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057ee:	dcec      	bgt.n	80057ca <__multadd+0x12>
 80057f0:	b30e      	cbz	r6, 8005836 <__multadd+0x7e>
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	42ab      	cmp	r3, r5
 80057f6:	dc19      	bgt.n	800582c <__multadd+0x74>
 80057f8:	6861      	ldr	r1, [r4, #4]
 80057fa:	4638      	mov	r0, r7
 80057fc:	3101      	adds	r1, #1
 80057fe:	f7ff ff79 	bl	80056f4 <_Balloc>
 8005802:	4680      	mov	r8, r0
 8005804:	b928      	cbnz	r0, 8005812 <__multadd+0x5a>
 8005806:	4602      	mov	r2, r0
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <__multadd+0x84>)
 800580a:	480d      	ldr	r0, [pc, #52]	; (8005840 <__multadd+0x88>)
 800580c:	21ba      	movs	r1, #186	; 0xba
 800580e:	f000 fd2b 	bl	8006268 <__assert_func>
 8005812:	6922      	ldr	r2, [r4, #16]
 8005814:	3202      	adds	r2, #2
 8005816:	f104 010c 	add.w	r1, r4, #12
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	300c      	adds	r0, #12
 800581e:	f000 fd15 	bl	800624c <memcpy>
 8005822:	4621      	mov	r1, r4
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ffa5 	bl	8005774 <_Bfree>
 800582a:	4644      	mov	r4, r8
 800582c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005830:	3501      	adds	r5, #1
 8005832:	615e      	str	r6, [r3, #20]
 8005834:	6125      	str	r5, [r4, #16]
 8005836:	4620      	mov	r0, r4
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	08006a04 	.word	0x08006a04
 8005840:	08006a15 	.word	0x08006a15

08005844 <__hi0bits>:
 8005844:	0c03      	lsrs	r3, r0, #16
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	b9d3      	cbnz	r3, 8005880 <__hi0bits+0x3c>
 800584a:	0400      	lsls	r0, r0, #16
 800584c:	2310      	movs	r3, #16
 800584e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005852:	bf04      	itt	eq
 8005854:	0200      	lsleq	r0, r0, #8
 8005856:	3308      	addeq	r3, #8
 8005858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800585c:	bf04      	itt	eq
 800585e:	0100      	lsleq	r0, r0, #4
 8005860:	3304      	addeq	r3, #4
 8005862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005866:	bf04      	itt	eq
 8005868:	0080      	lsleq	r0, r0, #2
 800586a:	3302      	addeq	r3, #2
 800586c:	2800      	cmp	r0, #0
 800586e:	db05      	blt.n	800587c <__hi0bits+0x38>
 8005870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005874:	f103 0301 	add.w	r3, r3, #1
 8005878:	bf08      	it	eq
 800587a:	2320      	moveq	r3, #32
 800587c:	4618      	mov	r0, r3
 800587e:	4770      	bx	lr
 8005880:	2300      	movs	r3, #0
 8005882:	e7e4      	b.n	800584e <__hi0bits+0xa>

08005884 <__lo0bits>:
 8005884:	6803      	ldr	r3, [r0, #0]
 8005886:	f013 0207 	ands.w	r2, r3, #7
 800588a:	d00c      	beq.n	80058a6 <__lo0bits+0x22>
 800588c:	07d9      	lsls	r1, r3, #31
 800588e:	d422      	bmi.n	80058d6 <__lo0bits+0x52>
 8005890:	079a      	lsls	r2, r3, #30
 8005892:	bf49      	itett	mi
 8005894:	085b      	lsrmi	r3, r3, #1
 8005896:	089b      	lsrpl	r3, r3, #2
 8005898:	6003      	strmi	r3, [r0, #0]
 800589a:	2201      	movmi	r2, #1
 800589c:	bf5c      	itt	pl
 800589e:	6003      	strpl	r3, [r0, #0]
 80058a0:	2202      	movpl	r2, #2
 80058a2:	4610      	mov	r0, r2
 80058a4:	4770      	bx	lr
 80058a6:	b299      	uxth	r1, r3
 80058a8:	b909      	cbnz	r1, 80058ae <__lo0bits+0x2a>
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	2210      	movs	r2, #16
 80058ae:	b2d9      	uxtb	r1, r3
 80058b0:	b909      	cbnz	r1, 80058b6 <__lo0bits+0x32>
 80058b2:	3208      	adds	r2, #8
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	0719      	lsls	r1, r3, #28
 80058b8:	bf04      	itt	eq
 80058ba:	091b      	lsreq	r3, r3, #4
 80058bc:	3204      	addeq	r2, #4
 80058be:	0799      	lsls	r1, r3, #30
 80058c0:	bf04      	itt	eq
 80058c2:	089b      	lsreq	r3, r3, #2
 80058c4:	3202      	addeq	r2, #2
 80058c6:	07d9      	lsls	r1, r3, #31
 80058c8:	d403      	bmi.n	80058d2 <__lo0bits+0x4e>
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	f102 0201 	add.w	r2, r2, #1
 80058d0:	d003      	beq.n	80058da <__lo0bits+0x56>
 80058d2:	6003      	str	r3, [r0, #0]
 80058d4:	e7e5      	b.n	80058a2 <__lo0bits+0x1e>
 80058d6:	2200      	movs	r2, #0
 80058d8:	e7e3      	b.n	80058a2 <__lo0bits+0x1e>
 80058da:	2220      	movs	r2, #32
 80058dc:	e7e1      	b.n	80058a2 <__lo0bits+0x1e>
	...

080058e0 <__i2b>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	460c      	mov	r4, r1
 80058e4:	2101      	movs	r1, #1
 80058e6:	f7ff ff05 	bl	80056f4 <_Balloc>
 80058ea:	4602      	mov	r2, r0
 80058ec:	b928      	cbnz	r0, 80058fa <__i2b+0x1a>
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <__i2b+0x24>)
 80058f0:	4805      	ldr	r0, [pc, #20]	; (8005908 <__i2b+0x28>)
 80058f2:	f240 1145 	movw	r1, #325	; 0x145
 80058f6:	f000 fcb7 	bl	8006268 <__assert_func>
 80058fa:	2301      	movs	r3, #1
 80058fc:	6144      	str	r4, [r0, #20]
 80058fe:	6103      	str	r3, [r0, #16]
 8005900:	bd10      	pop	{r4, pc}
 8005902:	bf00      	nop
 8005904:	08006a04 	.word	0x08006a04
 8005908:	08006a15 	.word	0x08006a15

0800590c <__multiply>:
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	4691      	mov	r9, r2
 8005912:	690a      	ldr	r2, [r1, #16]
 8005914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	bfb8      	it	lt
 800591c:	460b      	movlt	r3, r1
 800591e:	460c      	mov	r4, r1
 8005920:	bfbc      	itt	lt
 8005922:	464c      	movlt	r4, r9
 8005924:	4699      	movlt	r9, r3
 8005926:	6927      	ldr	r7, [r4, #16]
 8005928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	6861      	ldr	r1, [r4, #4]
 8005930:	eb07 060a 	add.w	r6, r7, sl
 8005934:	42b3      	cmp	r3, r6
 8005936:	b085      	sub	sp, #20
 8005938:	bfb8      	it	lt
 800593a:	3101      	addlt	r1, #1
 800593c:	f7ff feda 	bl	80056f4 <_Balloc>
 8005940:	b930      	cbnz	r0, 8005950 <__multiply+0x44>
 8005942:	4602      	mov	r2, r0
 8005944:	4b44      	ldr	r3, [pc, #272]	; (8005a58 <__multiply+0x14c>)
 8005946:	4845      	ldr	r0, [pc, #276]	; (8005a5c <__multiply+0x150>)
 8005948:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800594c:	f000 fc8c 	bl	8006268 <__assert_func>
 8005950:	f100 0514 	add.w	r5, r0, #20
 8005954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005958:	462b      	mov	r3, r5
 800595a:	2200      	movs	r2, #0
 800595c:	4543      	cmp	r3, r8
 800595e:	d321      	bcc.n	80059a4 <__multiply+0x98>
 8005960:	f104 0314 	add.w	r3, r4, #20
 8005964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005968:	f109 0314 	add.w	r3, r9, #20
 800596c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005970:	9202      	str	r2, [sp, #8]
 8005972:	1b3a      	subs	r2, r7, r4
 8005974:	3a15      	subs	r2, #21
 8005976:	f022 0203 	bic.w	r2, r2, #3
 800597a:	3204      	adds	r2, #4
 800597c:	f104 0115 	add.w	r1, r4, #21
 8005980:	428f      	cmp	r7, r1
 8005982:	bf38      	it	cc
 8005984:	2204      	movcc	r2, #4
 8005986:	9201      	str	r2, [sp, #4]
 8005988:	9a02      	ldr	r2, [sp, #8]
 800598a:	9303      	str	r3, [sp, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d80c      	bhi.n	80059aa <__multiply+0x9e>
 8005990:	2e00      	cmp	r6, #0
 8005992:	dd03      	ble.n	800599c <__multiply+0x90>
 8005994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05b      	beq.n	8005a54 <__multiply+0x148>
 800599c:	6106      	str	r6, [r0, #16]
 800599e:	b005      	add	sp, #20
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	f843 2b04 	str.w	r2, [r3], #4
 80059a8:	e7d8      	b.n	800595c <__multiply+0x50>
 80059aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80059ae:	f1ba 0f00 	cmp.w	sl, #0
 80059b2:	d024      	beq.n	80059fe <__multiply+0xf2>
 80059b4:	f104 0e14 	add.w	lr, r4, #20
 80059b8:	46a9      	mov	r9, r5
 80059ba:	f04f 0c00 	mov.w	ip, #0
 80059be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80059c2:	f8d9 1000 	ldr.w	r1, [r9]
 80059c6:	fa1f fb82 	uxth.w	fp, r2
 80059ca:	b289      	uxth	r1, r1
 80059cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80059d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80059d4:	f8d9 2000 	ldr.w	r2, [r9]
 80059d8:	4461      	add	r1, ip
 80059da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059de:	fb0a c20b 	mla	r2, sl, fp, ip
 80059e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059e6:	b289      	uxth	r1, r1
 80059e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059ec:	4577      	cmp	r7, lr
 80059ee:	f849 1b04 	str.w	r1, [r9], #4
 80059f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059f6:	d8e2      	bhi.n	80059be <__multiply+0xb2>
 80059f8:	9a01      	ldr	r2, [sp, #4]
 80059fa:	f845 c002 	str.w	ip, [r5, r2]
 80059fe:	9a03      	ldr	r2, [sp, #12]
 8005a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a04:	3304      	adds	r3, #4
 8005a06:	f1b9 0f00 	cmp.w	r9, #0
 8005a0a:	d021      	beq.n	8005a50 <__multiply+0x144>
 8005a0c:	6829      	ldr	r1, [r5, #0]
 8005a0e:	f104 0c14 	add.w	ip, r4, #20
 8005a12:	46ae      	mov	lr, r5
 8005a14:	f04f 0a00 	mov.w	sl, #0
 8005a18:	f8bc b000 	ldrh.w	fp, [ip]
 8005a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a20:	fb09 220b 	mla	r2, r9, fp, r2
 8005a24:	4452      	add	r2, sl
 8005a26:	b289      	uxth	r1, r1
 8005a28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8005a30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005a34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a38:	f8be 1000 	ldrh.w	r1, [lr]
 8005a3c:	fb09 110a 	mla	r1, r9, sl, r1
 8005a40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005a44:	4567      	cmp	r7, ip
 8005a46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a4a:	d8e5      	bhi.n	8005a18 <__multiply+0x10c>
 8005a4c:	9a01      	ldr	r2, [sp, #4]
 8005a4e:	50a9      	str	r1, [r5, r2]
 8005a50:	3504      	adds	r5, #4
 8005a52:	e799      	b.n	8005988 <__multiply+0x7c>
 8005a54:	3e01      	subs	r6, #1
 8005a56:	e79b      	b.n	8005990 <__multiply+0x84>
 8005a58:	08006a04 	.word	0x08006a04
 8005a5c:	08006a15 	.word	0x08006a15

08005a60 <__pow5mult>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4615      	mov	r5, r2
 8005a66:	f012 0203 	ands.w	r2, r2, #3
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	d007      	beq.n	8005a80 <__pow5mult+0x20>
 8005a70:	4c25      	ldr	r4, [pc, #148]	; (8005b08 <__pow5mult+0xa8>)
 8005a72:	3a01      	subs	r2, #1
 8005a74:	2300      	movs	r3, #0
 8005a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a7a:	f7ff fe9d 	bl	80057b8 <__multadd>
 8005a7e:	4607      	mov	r7, r0
 8005a80:	10ad      	asrs	r5, r5, #2
 8005a82:	d03d      	beq.n	8005b00 <__pow5mult+0xa0>
 8005a84:	69f4      	ldr	r4, [r6, #28]
 8005a86:	b97c      	cbnz	r4, 8005aa8 <__pow5mult+0x48>
 8005a88:	2010      	movs	r0, #16
 8005a8a:	f7ff fd7f 	bl	800558c <malloc>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	61f0      	str	r0, [r6, #28]
 8005a92:	b928      	cbnz	r0, 8005aa0 <__pow5mult+0x40>
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <__pow5mult+0xac>)
 8005a96:	481e      	ldr	r0, [pc, #120]	; (8005b10 <__pow5mult+0xb0>)
 8005a98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005a9c:	f000 fbe4 	bl	8006268 <__assert_func>
 8005aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005aa4:	6004      	str	r4, [r0, #0]
 8005aa6:	60c4      	str	r4, [r0, #12]
 8005aa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ab0:	b94c      	cbnz	r4, 8005ac6 <__pow5mult+0x66>
 8005ab2:	f240 2171 	movw	r1, #625	; 0x271
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff ff12 	bl	80058e0 <__i2b>
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	6003      	str	r3, [r0, #0]
 8005ac6:	f04f 0900 	mov.w	r9, #0
 8005aca:	07eb      	lsls	r3, r5, #31
 8005acc:	d50a      	bpl.n	8005ae4 <__pow5mult+0x84>
 8005ace:	4639      	mov	r1, r7
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff ff1a 	bl	800590c <__multiply>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4680      	mov	r8, r0
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff fe49 	bl	8005774 <_Bfree>
 8005ae2:	4647      	mov	r7, r8
 8005ae4:	106d      	asrs	r5, r5, #1
 8005ae6:	d00b      	beq.n	8005b00 <__pow5mult+0xa0>
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	b938      	cbnz	r0, 8005afc <__pow5mult+0x9c>
 8005aec:	4622      	mov	r2, r4
 8005aee:	4621      	mov	r1, r4
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff ff0b 	bl	800590c <__multiply>
 8005af6:	6020      	str	r0, [r4, #0]
 8005af8:	f8c0 9000 	str.w	r9, [r0]
 8005afc:	4604      	mov	r4, r0
 8005afe:	e7e4      	b.n	8005aca <__pow5mult+0x6a>
 8005b00:	4638      	mov	r0, r7
 8005b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b06:	bf00      	nop
 8005b08:	08006b60 	.word	0x08006b60
 8005b0c:	08006995 	.word	0x08006995
 8005b10:	08006a15 	.word	0x08006a15

08005b14 <__lshift>:
 8005b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	460c      	mov	r4, r1
 8005b1a:	6849      	ldr	r1, [r1, #4]
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	4607      	mov	r7, r0
 8005b26:	4691      	mov	r9, r2
 8005b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b2c:	f108 0601 	add.w	r6, r8, #1
 8005b30:	42b3      	cmp	r3, r6
 8005b32:	db0b      	blt.n	8005b4c <__lshift+0x38>
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff fddd 	bl	80056f4 <_Balloc>
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	b948      	cbnz	r0, 8005b52 <__lshift+0x3e>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <__lshift+0xd0>)
 8005b42:	4829      	ldr	r0, [pc, #164]	; (8005be8 <__lshift+0xd4>)
 8005b44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005b48:	f000 fb8e 	bl	8006268 <__assert_func>
 8005b4c:	3101      	adds	r1, #1
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	e7ee      	b.n	8005b30 <__lshift+0x1c>
 8005b52:	2300      	movs	r3, #0
 8005b54:	f100 0114 	add.w	r1, r0, #20
 8005b58:	f100 0210 	add.w	r2, r0, #16
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4553      	cmp	r3, sl
 8005b60:	db33      	blt.n	8005bca <__lshift+0xb6>
 8005b62:	6920      	ldr	r0, [r4, #16]
 8005b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b68:	f104 0314 	add.w	r3, r4, #20
 8005b6c:	f019 091f 	ands.w	r9, r9, #31
 8005b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b78:	d02b      	beq.n	8005bd2 <__lshift+0xbe>
 8005b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b7e:	468a      	mov	sl, r1
 8005b80:	2200      	movs	r2, #0
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	fa00 f009 	lsl.w	r0, r0, r9
 8005b88:	4310      	orrs	r0, r2
 8005b8a:	f84a 0b04 	str.w	r0, [sl], #4
 8005b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b92:	459c      	cmp	ip, r3
 8005b94:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b98:	d8f3      	bhi.n	8005b82 <__lshift+0x6e>
 8005b9a:	ebac 0304 	sub.w	r3, ip, r4
 8005b9e:	3b15      	subs	r3, #21
 8005ba0:	f023 0303 	bic.w	r3, r3, #3
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	f104 0015 	add.w	r0, r4, #21
 8005baa:	4584      	cmp	ip, r0
 8005bac:	bf38      	it	cc
 8005bae:	2304      	movcc	r3, #4
 8005bb0:	50ca      	str	r2, [r1, r3]
 8005bb2:	b10a      	cbz	r2, 8005bb8 <__lshift+0xa4>
 8005bb4:	f108 0602 	add.w	r6, r8, #2
 8005bb8:	3e01      	subs	r6, #1
 8005bba:	4638      	mov	r0, r7
 8005bbc:	612e      	str	r6, [r5, #16]
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	f7ff fdd8 	bl	8005774 <_Bfree>
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8005bce:	3301      	adds	r3, #1
 8005bd0:	e7c5      	b.n	8005b5e <__lshift+0x4a>
 8005bd2:	3904      	subs	r1, #4
 8005bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bdc:	459c      	cmp	ip, r3
 8005bde:	d8f9      	bhi.n	8005bd4 <__lshift+0xc0>
 8005be0:	e7ea      	b.n	8005bb8 <__lshift+0xa4>
 8005be2:	bf00      	nop
 8005be4:	08006a04 	.word	0x08006a04
 8005be8:	08006a15 	.word	0x08006a15

08005bec <__mcmp>:
 8005bec:	b530      	push	{r4, r5, lr}
 8005bee:	6902      	ldr	r2, [r0, #16]
 8005bf0:	690c      	ldr	r4, [r1, #16]
 8005bf2:	1b12      	subs	r2, r2, r4
 8005bf4:	d10e      	bne.n	8005c14 <__mcmp+0x28>
 8005bf6:	f100 0314 	add.w	r3, r0, #20
 8005bfa:	3114      	adds	r1, #20
 8005bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d003      	beq.n	8005c18 <__mcmp+0x2c>
 8005c10:	d305      	bcc.n	8005c1e <__mcmp+0x32>
 8005c12:	2201      	movs	r2, #1
 8005c14:	4610      	mov	r0, r2
 8005c16:	bd30      	pop	{r4, r5, pc}
 8005c18:	4283      	cmp	r3, r0
 8005c1a:	d3f3      	bcc.n	8005c04 <__mcmp+0x18>
 8005c1c:	e7fa      	b.n	8005c14 <__mcmp+0x28>
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c22:	e7f7      	b.n	8005c14 <__mcmp+0x28>

08005c24 <__mdiff>:
 8005c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	460c      	mov	r4, r1
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4690      	mov	r8, r2
 8005c32:	f7ff ffdb 	bl	8005bec <__mcmp>
 8005c36:	1e05      	subs	r5, r0, #0
 8005c38:	d110      	bne.n	8005c5c <__mdiff+0x38>
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff fd59 	bl	80056f4 <_Balloc>
 8005c42:	b930      	cbnz	r0, 8005c52 <__mdiff+0x2e>
 8005c44:	4b3a      	ldr	r3, [pc, #232]	; (8005d30 <__mdiff+0x10c>)
 8005c46:	4602      	mov	r2, r0
 8005c48:	f240 2137 	movw	r1, #567	; 0x237
 8005c4c:	4839      	ldr	r0, [pc, #228]	; (8005d34 <__mdiff+0x110>)
 8005c4e:	f000 fb0b 	bl	8006268 <__assert_func>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5c:	bfa4      	itt	ge
 8005c5e:	4643      	movge	r3, r8
 8005c60:	46a0      	movge	r8, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c68:	bfa6      	itte	ge
 8005c6a:	461c      	movge	r4, r3
 8005c6c:	2500      	movge	r5, #0
 8005c6e:	2501      	movlt	r5, #1
 8005c70:	f7ff fd40 	bl	80056f4 <_Balloc>
 8005c74:	b920      	cbnz	r0, 8005c80 <__mdiff+0x5c>
 8005c76:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <__mdiff+0x10c>)
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f240 2145 	movw	r1, #581	; 0x245
 8005c7e:	e7e5      	b.n	8005c4c <__mdiff+0x28>
 8005c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c84:	6926      	ldr	r6, [r4, #16]
 8005c86:	60c5      	str	r5, [r0, #12]
 8005c88:	f104 0914 	add.w	r9, r4, #20
 8005c8c:	f108 0514 	add.w	r5, r8, #20
 8005c90:	f100 0e14 	add.w	lr, r0, #20
 8005c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c9c:	f108 0210 	add.w	r2, r8, #16
 8005ca0:	46f2      	mov	sl, lr
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005cac:	fa11 f88b 	uxtah	r8, r1, fp
 8005cb0:	b299      	uxth	r1, r3
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	eba8 0801 	sub.w	r8, r8, r1
 8005cb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005cbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005cc0:	fa1f f888 	uxth.w	r8, r8
 8005cc4:	1419      	asrs	r1, r3, #16
 8005cc6:	454e      	cmp	r6, r9
 8005cc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ccc:	f84a 3b04 	str.w	r3, [sl], #4
 8005cd0:	d8e8      	bhi.n	8005ca4 <__mdiff+0x80>
 8005cd2:	1b33      	subs	r3, r6, r4
 8005cd4:	3b15      	subs	r3, #21
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	3304      	adds	r3, #4
 8005cdc:	3415      	adds	r4, #21
 8005cde:	42a6      	cmp	r6, r4
 8005ce0:	bf38      	it	cc
 8005ce2:	2304      	movcc	r3, #4
 8005ce4:	441d      	add	r5, r3
 8005ce6:	4473      	add	r3, lr
 8005ce8:	469e      	mov	lr, r3
 8005cea:	462e      	mov	r6, r5
 8005cec:	4566      	cmp	r6, ip
 8005cee:	d30e      	bcc.n	8005d0e <__mdiff+0xea>
 8005cf0:	f10c 0203 	add.w	r2, ip, #3
 8005cf4:	1b52      	subs	r2, r2, r5
 8005cf6:	f022 0203 	bic.w	r2, r2, #3
 8005cfa:	3d03      	subs	r5, #3
 8005cfc:	45ac      	cmp	ip, r5
 8005cfe:	bf38      	it	cc
 8005d00:	2200      	movcc	r2, #0
 8005d02:	4413      	add	r3, r2
 8005d04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005d08:	b17a      	cbz	r2, 8005d2a <__mdiff+0x106>
 8005d0a:	6107      	str	r7, [r0, #16]
 8005d0c:	e7a4      	b.n	8005c58 <__mdiff+0x34>
 8005d0e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005d12:	fa11 f288 	uxtah	r2, r1, r8
 8005d16:	1414      	asrs	r4, r2, #16
 8005d18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005d22:	f84e 2b04 	str.w	r2, [lr], #4
 8005d26:	1421      	asrs	r1, r4, #16
 8005d28:	e7e0      	b.n	8005cec <__mdiff+0xc8>
 8005d2a:	3f01      	subs	r7, #1
 8005d2c:	e7ea      	b.n	8005d04 <__mdiff+0xe0>
 8005d2e:	bf00      	nop
 8005d30:	08006a04 	.word	0x08006a04
 8005d34:	08006a15 	.word	0x08006a15

08005d38 <__d2b>:
 8005d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d3c:	460f      	mov	r7, r1
 8005d3e:	2101      	movs	r1, #1
 8005d40:	ec59 8b10 	vmov	r8, r9, d0
 8005d44:	4616      	mov	r6, r2
 8005d46:	f7ff fcd5 	bl	80056f4 <_Balloc>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	b930      	cbnz	r0, 8005d5c <__d2b+0x24>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <__d2b+0xac>)
 8005d52:	4825      	ldr	r0, [pc, #148]	; (8005de8 <__d2b+0xb0>)
 8005d54:	f240 310f 	movw	r1, #783	; 0x30f
 8005d58:	f000 fa86 	bl	8006268 <__assert_func>
 8005d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d64:	bb2d      	cbnz	r5, 8005db2 <__d2b+0x7a>
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f1b8 0300 	subs.w	r3, r8, #0
 8005d6c:	d026      	beq.n	8005dbc <__d2b+0x84>
 8005d6e:	4668      	mov	r0, sp
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	f7ff fd87 	bl	8005884 <__lo0bits>
 8005d76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d7a:	b1e8      	cbz	r0, 8005db8 <__d2b+0x80>
 8005d7c:	f1c0 0320 	rsb	r3, r0, #32
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	430b      	orrs	r3, r1
 8005d86:	40c2      	lsrs	r2, r0
 8005d88:	6163      	str	r3, [r4, #20]
 8005d8a:	9201      	str	r2, [sp, #4]
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	61a3      	str	r3, [r4, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2202      	movne	r2, #2
 8005d96:	2201      	moveq	r2, #1
 8005d98:	6122      	str	r2, [r4, #16]
 8005d9a:	b1bd      	cbz	r5, 8005dcc <__d2b+0x94>
 8005d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005da0:	4405      	add	r5, r0
 8005da2:	603d      	str	r5, [r7, #0]
 8005da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005da8:	6030      	str	r0, [r6, #0]
 8005daa:	4620      	mov	r0, r4
 8005dac:	b003      	add	sp, #12
 8005dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db6:	e7d6      	b.n	8005d66 <__d2b+0x2e>
 8005db8:	6161      	str	r1, [r4, #20]
 8005dba:	e7e7      	b.n	8005d8c <__d2b+0x54>
 8005dbc:	a801      	add	r0, sp, #4
 8005dbe:	f7ff fd61 	bl	8005884 <__lo0bits>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	6163      	str	r3, [r4, #20]
 8005dc6:	3020      	adds	r0, #32
 8005dc8:	2201      	movs	r2, #1
 8005dca:	e7e5      	b.n	8005d98 <__d2b+0x60>
 8005dcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005dd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005dd4:	6038      	str	r0, [r7, #0]
 8005dd6:	6918      	ldr	r0, [r3, #16]
 8005dd8:	f7ff fd34 	bl	8005844 <__hi0bits>
 8005ddc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005de0:	e7e2      	b.n	8005da8 <__d2b+0x70>
 8005de2:	bf00      	nop
 8005de4:	08006a04 	.word	0x08006a04
 8005de8:	08006a15 	.word	0x08006a15

08005dec <__ssputs_r>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	688e      	ldr	r6, [r1, #8]
 8005df2:	461f      	mov	r7, r3
 8005df4:	42be      	cmp	r6, r7
 8005df6:	680b      	ldr	r3, [r1, #0]
 8005df8:	4682      	mov	sl, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	d82c      	bhi.n	8005e5a <__ssputs_r+0x6e>
 8005e00:	898a      	ldrh	r2, [r1, #12]
 8005e02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e06:	d026      	beq.n	8005e56 <__ssputs_r+0x6a>
 8005e08:	6965      	ldr	r5, [r4, #20]
 8005e0a:	6909      	ldr	r1, [r1, #16]
 8005e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e10:	eba3 0901 	sub.w	r9, r3, r1
 8005e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e18:	1c7b      	adds	r3, r7, #1
 8005e1a:	444b      	add	r3, r9
 8005e1c:	106d      	asrs	r5, r5, #1
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	bf38      	it	cc
 8005e22:	461d      	movcc	r5, r3
 8005e24:	0553      	lsls	r3, r2, #21
 8005e26:	d527      	bpl.n	8005e78 <__ssputs_r+0x8c>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7ff fbd7 	bl	80055dc <_malloc_r>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	b360      	cbz	r0, 8005e8c <__ssputs_r+0xa0>
 8005e32:	6921      	ldr	r1, [r4, #16]
 8005e34:	464a      	mov	r2, r9
 8005e36:	f000 fa09 	bl	800624c <memcpy>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	6126      	str	r6, [r4, #16]
 8005e48:	6165      	str	r5, [r4, #20]
 8005e4a:	444e      	add	r6, r9
 8005e4c:	eba5 0509 	sub.w	r5, r5, r9
 8005e50:	6026      	str	r6, [r4, #0]
 8005e52:	60a5      	str	r5, [r4, #8]
 8005e54:	463e      	mov	r6, r7
 8005e56:	42be      	cmp	r6, r7
 8005e58:	d900      	bls.n	8005e5c <__ssputs_r+0x70>
 8005e5a:	463e      	mov	r6, r7
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	4632      	mov	r2, r6
 8005e60:	4641      	mov	r1, r8
 8005e62:	f000 f9c9 	bl	80061f8 <memmove>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	1b9b      	subs	r3, r3, r6
 8005e6a:	60a3      	str	r3, [r4, #8]
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	4433      	add	r3, r6
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	2000      	movs	r0, #0
 8005e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e78:	462a      	mov	r2, r5
 8005e7a:	f000 fa3b 	bl	80062f4 <_realloc_r>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1e0      	bne.n	8005e46 <__ssputs_r+0x5a>
 8005e84:	6921      	ldr	r1, [r4, #16]
 8005e86:	4650      	mov	r0, sl
 8005e88:	f7ff fb34 	bl	80054f4 <_free_r>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	f8ca 3000 	str.w	r3, [sl]
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e9e:	e7e9      	b.n	8005e74 <__ssputs_r+0x88>

08005ea0 <_svfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	898b      	ldrh	r3, [r1, #12]
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	b09d      	sub	sp, #116	; 0x74
 8005eac:	4607      	mov	r7, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	d50e      	bpl.n	8005ed2 <_svfiprintf_r+0x32>
 8005eb4:	690b      	ldr	r3, [r1, #16]
 8005eb6:	b963      	cbnz	r3, 8005ed2 <_svfiprintf_r+0x32>
 8005eb8:	2140      	movs	r1, #64	; 0x40
 8005eba:	f7ff fb8f 	bl	80055dc <_malloc_r>
 8005ebe:	6028      	str	r0, [r5, #0]
 8005ec0:	6128      	str	r0, [r5, #16]
 8005ec2:	b920      	cbnz	r0, 8005ece <_svfiprintf_r+0x2e>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ecc:	e0d0      	b.n	8006070 <_svfiprintf_r+0x1d0>
 8005ece:	2340      	movs	r3, #64	; 0x40
 8005ed0:	616b      	str	r3, [r5, #20]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed6:	2320      	movs	r3, #32
 8005ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee0:	2330      	movs	r3, #48	; 0x30
 8005ee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006088 <_svfiprintf_r+0x1e8>
 8005ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eea:	f04f 0901 	mov.w	r9, #1
 8005eee:	4623      	mov	r3, r4
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef6:	b10a      	cbz	r2, 8005efc <_svfiprintf_r+0x5c>
 8005ef8:	2a25      	cmp	r2, #37	; 0x25
 8005efa:	d1f9      	bne.n	8005ef0 <_svfiprintf_r+0x50>
 8005efc:	ebba 0b04 	subs.w	fp, sl, r4
 8005f00:	d00b      	beq.n	8005f1a <_svfiprintf_r+0x7a>
 8005f02:	465b      	mov	r3, fp
 8005f04:	4622      	mov	r2, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ff6f 	bl	8005dec <__ssputs_r>
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f000 80a9 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f16:	445a      	add	r2, fp
 8005f18:	9209      	str	r2, [sp, #36]	; 0x24
 8005f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80a1 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f24:	2300      	movs	r3, #0
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f2e:	f10a 0a01 	add.w	sl, sl, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9307      	str	r3, [sp, #28]
 8005f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3c:	4654      	mov	r4, sl
 8005f3e:	2205      	movs	r2, #5
 8005f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f44:	4850      	ldr	r0, [pc, #320]	; (8006088 <_svfiprintf_r+0x1e8>)
 8005f46:	f7fa f943 	bl	80001d0 <memchr>
 8005f4a:	9a04      	ldr	r2, [sp, #16]
 8005f4c:	b9d8      	cbnz	r0, 8005f86 <_svfiprintf_r+0xe6>
 8005f4e:	06d0      	lsls	r0, r2, #27
 8005f50:	bf44      	itt	mi
 8005f52:	2320      	movmi	r3, #32
 8005f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f58:	0711      	lsls	r1, r2, #28
 8005f5a:	bf44      	itt	mi
 8005f5c:	232b      	movmi	r3, #43	; 0x2b
 8005f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f62:	f89a 3000 	ldrb.w	r3, [sl]
 8005f66:	2b2a      	cmp	r3, #42	; 0x2a
 8005f68:	d015      	beq.n	8005f96 <_svfiprintf_r+0xf6>
 8005f6a:	9a07      	ldr	r2, [sp, #28]
 8005f6c:	4654      	mov	r4, sl
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f04f 0c0a 	mov.w	ip, #10
 8005f74:	4621      	mov	r1, r4
 8005f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7a:	3b30      	subs	r3, #48	; 0x30
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	d94d      	bls.n	800601c <_svfiprintf_r+0x17c>
 8005f80:	b1b0      	cbz	r0, 8005fb0 <_svfiprintf_r+0x110>
 8005f82:	9207      	str	r2, [sp, #28]
 8005f84:	e014      	b.n	8005fb0 <_svfiprintf_r+0x110>
 8005f86:	eba0 0308 	sub.w	r3, r0, r8
 8005f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	46a2      	mov	sl, r4
 8005f94:	e7d2      	b.n	8005f3c <_svfiprintf_r+0x9c>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	9103      	str	r1, [sp, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfbb      	ittet	lt
 8005fa2:	425b      	neglt	r3, r3
 8005fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fa8:	9307      	strge	r3, [sp, #28]
 8005faa:	9307      	strlt	r3, [sp, #28]
 8005fac:	bfb8      	it	lt
 8005fae:	9204      	strlt	r2, [sp, #16]
 8005fb0:	7823      	ldrb	r3, [r4, #0]
 8005fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb4:	d10c      	bne.n	8005fd0 <_svfiprintf_r+0x130>
 8005fb6:	7863      	ldrb	r3, [r4, #1]
 8005fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fba:	d134      	bne.n	8006026 <_svfiprintf_r+0x186>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	9203      	str	r2, [sp, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bfb8      	it	lt
 8005fc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fcc:	3402      	adds	r4, #2
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006098 <_svfiprintf_r+0x1f8>
 8005fd4:	7821      	ldrb	r1, [r4, #0]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4650      	mov	r0, sl
 8005fda:	f7fa f8f9 	bl	80001d0 <memchr>
 8005fde:	b138      	cbz	r0, 8005ff0 <_svfiprintf_r+0x150>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	eba0 000a 	sub.w	r0, r0, sl
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	4082      	lsls	r2, r0
 8005fea:	4313      	orrs	r3, r2
 8005fec:	3401      	adds	r4, #1
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff4:	4825      	ldr	r0, [pc, #148]	; (800608c <_svfiprintf_r+0x1ec>)
 8005ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ffa:	2206      	movs	r2, #6
 8005ffc:	f7fa f8e8 	bl	80001d0 <memchr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d038      	beq.n	8006076 <_svfiprintf_r+0x1d6>
 8006004:	4b22      	ldr	r3, [pc, #136]	; (8006090 <_svfiprintf_r+0x1f0>)
 8006006:	bb1b      	cbnz	r3, 8006050 <_svfiprintf_r+0x1b0>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	3307      	adds	r3, #7
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	4433      	add	r3, r6
 8006018:	9309      	str	r3, [sp, #36]	; 0x24
 800601a:	e768      	b.n	8005eee <_svfiprintf_r+0x4e>
 800601c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006020:	460c      	mov	r4, r1
 8006022:	2001      	movs	r0, #1
 8006024:	e7a6      	b.n	8005f74 <_svfiprintf_r+0xd4>
 8006026:	2300      	movs	r3, #0
 8006028:	3401      	adds	r4, #1
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0c0a 	mov.w	ip, #10
 8006032:	4620      	mov	r0, r4
 8006034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006038:	3a30      	subs	r2, #48	; 0x30
 800603a:	2a09      	cmp	r2, #9
 800603c:	d903      	bls.n	8006046 <_svfiprintf_r+0x1a6>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0c6      	beq.n	8005fd0 <_svfiprintf_r+0x130>
 8006042:	9105      	str	r1, [sp, #20]
 8006044:	e7c4      	b.n	8005fd0 <_svfiprintf_r+0x130>
 8006046:	fb0c 2101 	mla	r1, ip, r1, r2
 800604a:	4604      	mov	r4, r0
 800604c:	2301      	movs	r3, #1
 800604e:	e7f0      	b.n	8006032 <_svfiprintf_r+0x192>
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462a      	mov	r2, r5
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <_svfiprintf_r+0x1f4>)
 8006058:	a904      	add	r1, sp, #16
 800605a:	4638      	mov	r0, r7
 800605c:	f7fd fe62 	bl	8003d24 <_printf_float>
 8006060:	1c42      	adds	r2, r0, #1
 8006062:	4606      	mov	r6, r0
 8006064:	d1d6      	bne.n	8006014 <_svfiprintf_r+0x174>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	065b      	lsls	r3, r3, #25
 800606a:	f53f af2d 	bmi.w	8005ec8 <_svfiprintf_r+0x28>
 800606e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006070:	b01d      	add	sp, #116	; 0x74
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	ab03      	add	r3, sp, #12
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	462a      	mov	r2, r5
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_svfiprintf_r+0x1f4>)
 800607e:	a904      	add	r1, sp, #16
 8006080:	4638      	mov	r0, r7
 8006082:	f7fe f8f3 	bl	800426c <_printf_i>
 8006086:	e7eb      	b.n	8006060 <_svfiprintf_r+0x1c0>
 8006088:	08006b6c 	.word	0x08006b6c
 800608c:	08006b76 	.word	0x08006b76
 8006090:	08003d25 	.word	0x08003d25
 8006094:	08005ded 	.word	0x08005ded
 8006098:	08006b72 	.word	0x08006b72

0800609c <__sflush_r>:
 800609c:	898a      	ldrh	r2, [r1, #12]
 800609e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	4605      	mov	r5, r0
 80060a4:	0710      	lsls	r0, r2, #28
 80060a6:	460c      	mov	r4, r1
 80060a8:	d458      	bmi.n	800615c <__sflush_r+0xc0>
 80060aa:	684b      	ldr	r3, [r1, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dc05      	bgt.n	80060bc <__sflush_r+0x20>
 80060b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dc02      	bgt.n	80060bc <__sflush_r+0x20>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060be:	2e00      	cmp	r6, #0
 80060c0:	d0f9      	beq.n	80060b6 <__sflush_r+0x1a>
 80060c2:	2300      	movs	r3, #0
 80060c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060c8:	682f      	ldr	r7, [r5, #0]
 80060ca:	6a21      	ldr	r1, [r4, #32]
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	d032      	beq.n	8006136 <__sflush_r+0x9a>
 80060d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	075a      	lsls	r2, r3, #29
 80060d6:	d505      	bpl.n	80060e4 <__sflush_r+0x48>
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	1ac0      	subs	r0, r0, r3
 80060dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060de:	b10b      	cbz	r3, 80060e4 <__sflush_r+0x48>
 80060e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060e2:	1ac0      	subs	r0, r0, r3
 80060e4:	2300      	movs	r3, #0
 80060e6:	4602      	mov	r2, r0
 80060e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ea:	6a21      	ldr	r1, [r4, #32]
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b0      	blx	r6
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	d106      	bne.n	8006104 <__sflush_r+0x68>
 80060f6:	6829      	ldr	r1, [r5, #0]
 80060f8:	291d      	cmp	r1, #29
 80060fa:	d82b      	bhi.n	8006154 <__sflush_r+0xb8>
 80060fc:	4a29      	ldr	r2, [pc, #164]	; (80061a4 <__sflush_r+0x108>)
 80060fe:	410a      	asrs	r2, r1
 8006100:	07d6      	lsls	r6, r2, #31
 8006102:	d427      	bmi.n	8006154 <__sflush_r+0xb8>
 8006104:	2200      	movs	r2, #0
 8006106:	6062      	str	r2, [r4, #4]
 8006108:	04d9      	lsls	r1, r3, #19
 800610a:	6922      	ldr	r2, [r4, #16]
 800610c:	6022      	str	r2, [r4, #0]
 800610e:	d504      	bpl.n	800611a <__sflush_r+0x7e>
 8006110:	1c42      	adds	r2, r0, #1
 8006112:	d101      	bne.n	8006118 <__sflush_r+0x7c>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b903      	cbnz	r3, 800611a <__sflush_r+0x7e>
 8006118:	6560      	str	r0, [r4, #84]	; 0x54
 800611a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800611c:	602f      	str	r7, [r5, #0]
 800611e:	2900      	cmp	r1, #0
 8006120:	d0c9      	beq.n	80060b6 <__sflush_r+0x1a>
 8006122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006126:	4299      	cmp	r1, r3
 8006128:	d002      	beq.n	8006130 <__sflush_r+0x94>
 800612a:	4628      	mov	r0, r5
 800612c:	f7ff f9e2 	bl	80054f4 <_free_r>
 8006130:	2000      	movs	r0, #0
 8006132:	6360      	str	r0, [r4, #52]	; 0x34
 8006134:	e7c0      	b.n	80060b8 <__sflush_r+0x1c>
 8006136:	2301      	movs	r3, #1
 8006138:	4628      	mov	r0, r5
 800613a:	47b0      	blx	r6
 800613c:	1c41      	adds	r1, r0, #1
 800613e:	d1c8      	bne.n	80060d2 <__sflush_r+0x36>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0c5      	beq.n	80060d2 <__sflush_r+0x36>
 8006146:	2b1d      	cmp	r3, #29
 8006148:	d001      	beq.n	800614e <__sflush_r+0xb2>
 800614a:	2b16      	cmp	r3, #22
 800614c:	d101      	bne.n	8006152 <__sflush_r+0xb6>
 800614e:	602f      	str	r7, [r5, #0]
 8006150:	e7b1      	b.n	80060b6 <__sflush_r+0x1a>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	e7ad      	b.n	80060b8 <__sflush_r+0x1c>
 800615c:	690f      	ldr	r7, [r1, #16]
 800615e:	2f00      	cmp	r7, #0
 8006160:	d0a9      	beq.n	80060b6 <__sflush_r+0x1a>
 8006162:	0793      	lsls	r3, r2, #30
 8006164:	680e      	ldr	r6, [r1, #0]
 8006166:	bf08      	it	eq
 8006168:	694b      	ldreq	r3, [r1, #20]
 800616a:	600f      	str	r7, [r1, #0]
 800616c:	bf18      	it	ne
 800616e:	2300      	movne	r3, #0
 8006170:	eba6 0807 	sub.w	r8, r6, r7
 8006174:	608b      	str	r3, [r1, #8]
 8006176:	f1b8 0f00 	cmp.w	r8, #0
 800617a:	dd9c      	ble.n	80060b6 <__sflush_r+0x1a>
 800617c:	6a21      	ldr	r1, [r4, #32]
 800617e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006180:	4643      	mov	r3, r8
 8006182:	463a      	mov	r2, r7
 8006184:	4628      	mov	r0, r5
 8006186:	47b0      	blx	r6
 8006188:	2800      	cmp	r0, #0
 800618a:	dc06      	bgt.n	800619a <__sflush_r+0xfe>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006198:	e78e      	b.n	80060b8 <__sflush_r+0x1c>
 800619a:	4407      	add	r7, r0
 800619c:	eba8 0800 	sub.w	r8, r8, r0
 80061a0:	e7e9      	b.n	8006176 <__sflush_r+0xda>
 80061a2:	bf00      	nop
 80061a4:	dfbffffe 	.word	0xdfbffffe

080061a8 <_fflush_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	690b      	ldr	r3, [r1, #16]
 80061ac:	4605      	mov	r5, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	b913      	cbnz	r3, 80061b8 <_fflush_r+0x10>
 80061b2:	2500      	movs	r5, #0
 80061b4:	4628      	mov	r0, r5
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	b118      	cbz	r0, 80061c2 <_fflush_r+0x1a>
 80061ba:	6a03      	ldr	r3, [r0, #32]
 80061bc:	b90b      	cbnz	r3, 80061c2 <_fflush_r+0x1a>
 80061be:	f7fe fa03 	bl	80045c8 <__sinit>
 80061c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f3      	beq.n	80061b2 <_fflush_r+0xa>
 80061ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061cc:	07d0      	lsls	r0, r2, #31
 80061ce:	d404      	bmi.n	80061da <_fflush_r+0x32>
 80061d0:	0599      	lsls	r1, r3, #22
 80061d2:	d402      	bmi.n	80061da <_fflush_r+0x32>
 80061d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d6:	f7fe fb0e 	bl	80047f6 <__retarget_lock_acquire_recursive>
 80061da:	4628      	mov	r0, r5
 80061dc:	4621      	mov	r1, r4
 80061de:	f7ff ff5d 	bl	800609c <__sflush_r>
 80061e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e4:	07da      	lsls	r2, r3, #31
 80061e6:	4605      	mov	r5, r0
 80061e8:	d4e4      	bmi.n	80061b4 <_fflush_r+0xc>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	059b      	lsls	r3, r3, #22
 80061ee:	d4e1      	bmi.n	80061b4 <_fflush_r+0xc>
 80061f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f2:	f7fe fb01 	bl	80047f8 <__retarget_lock_release_recursive>
 80061f6:	e7dd      	b.n	80061b4 <_fflush_r+0xc>

080061f8 <memmove>:
 80061f8:	4288      	cmp	r0, r1
 80061fa:	b510      	push	{r4, lr}
 80061fc:	eb01 0402 	add.w	r4, r1, r2
 8006200:	d902      	bls.n	8006208 <memmove+0x10>
 8006202:	4284      	cmp	r4, r0
 8006204:	4623      	mov	r3, r4
 8006206:	d807      	bhi.n	8006218 <memmove+0x20>
 8006208:	1e43      	subs	r3, r0, #1
 800620a:	42a1      	cmp	r1, r4
 800620c:	d008      	beq.n	8006220 <memmove+0x28>
 800620e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006216:	e7f8      	b.n	800620a <memmove+0x12>
 8006218:	4402      	add	r2, r0
 800621a:	4601      	mov	r1, r0
 800621c:	428a      	cmp	r2, r1
 800621e:	d100      	bne.n	8006222 <memmove+0x2a>
 8006220:	bd10      	pop	{r4, pc}
 8006222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800622a:	e7f7      	b.n	800621c <memmove+0x24>

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_sbrk_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fb faac 	bl	8001794 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	2000046c 	.word	0x2000046c

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006262:	4291      	cmp	r1, r2
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <__assert_func>:
 8006268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800626a:	4614      	mov	r4, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <__assert_func+0x2c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4605      	mov	r5, r0
 8006274:	68d8      	ldr	r0, [r3, #12]
 8006276:	b14c      	cbz	r4, 800628c <__assert_func+0x24>
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <__assert_func+0x30>)
 800627a:	9100      	str	r1, [sp, #0]
 800627c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006280:	4906      	ldr	r1, [pc, #24]	; (800629c <__assert_func+0x34>)
 8006282:	462b      	mov	r3, r5
 8006284:	f000 f872 	bl	800636c <fiprintf>
 8006288:	f000 f882 	bl	8006390 <abort>
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <__assert_func+0x38>)
 800628e:	461c      	mov	r4, r3
 8006290:	e7f3      	b.n	800627a <__assert_func+0x12>
 8006292:	bf00      	nop
 8006294:	20000064 	.word	0x20000064
 8006298:	08006b87 	.word	0x08006b87
 800629c:	08006b94 	.word	0x08006b94
 80062a0:	08006bc2 	.word	0x08006bc2

080062a4 <_calloc_r>:
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a6:	fba1 2402 	umull	r2, r4, r1, r2
 80062aa:	b94c      	cbnz	r4, 80062c0 <_calloc_r+0x1c>
 80062ac:	4611      	mov	r1, r2
 80062ae:	9201      	str	r2, [sp, #4]
 80062b0:	f7ff f994 	bl	80055dc <_malloc_r>
 80062b4:	9a01      	ldr	r2, [sp, #4]
 80062b6:	4605      	mov	r5, r0
 80062b8:	b930      	cbnz	r0, 80062c8 <_calloc_r+0x24>
 80062ba:	4628      	mov	r0, r5
 80062bc:	b003      	add	sp, #12
 80062be:	bd30      	pop	{r4, r5, pc}
 80062c0:	220c      	movs	r2, #12
 80062c2:	6002      	str	r2, [r0, #0]
 80062c4:	2500      	movs	r5, #0
 80062c6:	e7f8      	b.n	80062ba <_calloc_r+0x16>
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7fe fa16 	bl	80046fa <memset>
 80062ce:	e7f4      	b.n	80062ba <_calloc_r+0x16>

080062d0 <__ascii_mbtowc>:
 80062d0:	b082      	sub	sp, #8
 80062d2:	b901      	cbnz	r1, 80062d6 <__ascii_mbtowc+0x6>
 80062d4:	a901      	add	r1, sp, #4
 80062d6:	b142      	cbz	r2, 80062ea <__ascii_mbtowc+0x1a>
 80062d8:	b14b      	cbz	r3, 80062ee <__ascii_mbtowc+0x1e>
 80062da:	7813      	ldrb	r3, [r2, #0]
 80062dc:	600b      	str	r3, [r1, #0]
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	1e10      	subs	r0, r2, #0
 80062e2:	bf18      	it	ne
 80062e4:	2001      	movne	r0, #1
 80062e6:	b002      	add	sp, #8
 80062e8:	4770      	bx	lr
 80062ea:	4610      	mov	r0, r2
 80062ec:	e7fb      	b.n	80062e6 <__ascii_mbtowc+0x16>
 80062ee:	f06f 0001 	mvn.w	r0, #1
 80062f2:	e7f8      	b.n	80062e6 <__ascii_mbtowc+0x16>

080062f4 <_realloc_r>:
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	4680      	mov	r8, r0
 80062fa:	4614      	mov	r4, r2
 80062fc:	460e      	mov	r6, r1
 80062fe:	b921      	cbnz	r1, 800630a <_realloc_r+0x16>
 8006300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	4611      	mov	r1, r2
 8006306:	f7ff b969 	b.w	80055dc <_malloc_r>
 800630a:	b92a      	cbnz	r2, 8006318 <_realloc_r+0x24>
 800630c:	f7ff f8f2 	bl	80054f4 <_free_r>
 8006310:	4625      	mov	r5, r4
 8006312:	4628      	mov	r0, r5
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	f000 f841 	bl	800639e <_malloc_usable_size_r>
 800631c:	4284      	cmp	r4, r0
 800631e:	4607      	mov	r7, r0
 8006320:	d802      	bhi.n	8006328 <_realloc_r+0x34>
 8006322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006326:	d812      	bhi.n	800634e <_realloc_r+0x5a>
 8006328:	4621      	mov	r1, r4
 800632a:	4640      	mov	r0, r8
 800632c:	f7ff f956 	bl	80055dc <_malloc_r>
 8006330:	4605      	mov	r5, r0
 8006332:	2800      	cmp	r0, #0
 8006334:	d0ed      	beq.n	8006312 <_realloc_r+0x1e>
 8006336:	42bc      	cmp	r4, r7
 8006338:	4622      	mov	r2, r4
 800633a:	4631      	mov	r1, r6
 800633c:	bf28      	it	cs
 800633e:	463a      	movcs	r2, r7
 8006340:	f7ff ff84 	bl	800624c <memcpy>
 8006344:	4631      	mov	r1, r6
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff f8d4 	bl	80054f4 <_free_r>
 800634c:	e7e1      	b.n	8006312 <_realloc_r+0x1e>
 800634e:	4635      	mov	r5, r6
 8006350:	e7df      	b.n	8006312 <_realloc_r+0x1e>

08006352 <__ascii_wctomb>:
 8006352:	b149      	cbz	r1, 8006368 <__ascii_wctomb+0x16>
 8006354:	2aff      	cmp	r2, #255	; 0xff
 8006356:	bf85      	ittet	hi
 8006358:	238a      	movhi	r3, #138	; 0x8a
 800635a:	6003      	strhi	r3, [r0, #0]
 800635c:	700a      	strbls	r2, [r1, #0]
 800635e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006362:	bf98      	it	ls
 8006364:	2001      	movls	r0, #1
 8006366:	4770      	bx	lr
 8006368:	4608      	mov	r0, r1
 800636a:	4770      	bx	lr

0800636c <fiprintf>:
 800636c:	b40e      	push	{r1, r2, r3}
 800636e:	b503      	push	{r0, r1, lr}
 8006370:	4601      	mov	r1, r0
 8006372:	ab03      	add	r3, sp, #12
 8006374:	4805      	ldr	r0, [pc, #20]	; (800638c <fiprintf+0x20>)
 8006376:	f853 2b04 	ldr.w	r2, [r3], #4
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	f000 f83f 	bl	8006400 <_vfiprintf_r>
 8006382:	b002      	add	sp, #8
 8006384:	f85d eb04 	ldr.w	lr, [sp], #4
 8006388:	b003      	add	sp, #12
 800638a:	4770      	bx	lr
 800638c:	20000064 	.word	0x20000064

08006390 <abort>:
 8006390:	b508      	push	{r3, lr}
 8006392:	2006      	movs	r0, #6
 8006394:	f000 fa0c 	bl	80067b0 <raise>
 8006398:	2001      	movs	r0, #1
 800639a:	f7fb f983 	bl	80016a4 <_exit>

0800639e <_malloc_usable_size_r>:
 800639e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a2:	1f18      	subs	r0, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfbc      	itt	lt
 80063a8:	580b      	ldrlt	r3, [r1, r0]
 80063aa:	18c0      	addlt	r0, r0, r3
 80063ac:	4770      	bx	lr

080063ae <__sfputc_r>:
 80063ae:	6893      	ldr	r3, [r2, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	b410      	push	{r4}
 80063b6:	6093      	str	r3, [r2, #8]
 80063b8:	da08      	bge.n	80063cc <__sfputc_r+0x1e>
 80063ba:	6994      	ldr	r4, [r2, #24]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	db01      	blt.n	80063c4 <__sfputc_r+0x16>
 80063c0:	290a      	cmp	r1, #10
 80063c2:	d103      	bne.n	80063cc <__sfputc_r+0x1e>
 80063c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c8:	f000 b934 	b.w	8006634 <__swbuf_r>
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	1c58      	adds	r0, r3, #1
 80063d0:	6010      	str	r0, [r2, #0]
 80063d2:	7019      	strb	r1, [r3, #0]
 80063d4:	4608      	mov	r0, r1
 80063d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063da:	4770      	bx	lr

080063dc <__sfputs_r>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	4606      	mov	r6, r0
 80063e0:	460f      	mov	r7, r1
 80063e2:	4614      	mov	r4, r2
 80063e4:	18d5      	adds	r5, r2, r3
 80063e6:	42ac      	cmp	r4, r5
 80063e8:	d101      	bne.n	80063ee <__sfputs_r+0x12>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e007      	b.n	80063fe <__sfputs_r+0x22>
 80063ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f2:	463a      	mov	r2, r7
 80063f4:	4630      	mov	r0, r6
 80063f6:	f7ff ffda 	bl	80063ae <__sfputc_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d1f3      	bne.n	80063e6 <__sfputs_r+0xa>
 80063fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006400 <_vfiprintf_r>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	460d      	mov	r5, r1
 8006406:	b09d      	sub	sp, #116	; 0x74
 8006408:	4614      	mov	r4, r2
 800640a:	4698      	mov	r8, r3
 800640c:	4606      	mov	r6, r0
 800640e:	b118      	cbz	r0, 8006418 <_vfiprintf_r+0x18>
 8006410:	6a03      	ldr	r3, [r0, #32]
 8006412:	b90b      	cbnz	r3, 8006418 <_vfiprintf_r+0x18>
 8006414:	f7fe f8d8 	bl	80045c8 <__sinit>
 8006418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800641a:	07d9      	lsls	r1, r3, #31
 800641c:	d405      	bmi.n	800642a <_vfiprintf_r+0x2a>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	059a      	lsls	r2, r3, #22
 8006422:	d402      	bmi.n	800642a <_vfiprintf_r+0x2a>
 8006424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006426:	f7fe f9e6 	bl	80047f6 <__retarget_lock_acquire_recursive>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	071b      	lsls	r3, r3, #28
 800642e:	d501      	bpl.n	8006434 <_vfiprintf_r+0x34>
 8006430:	692b      	ldr	r3, [r5, #16]
 8006432:	b99b      	cbnz	r3, 800645c <_vfiprintf_r+0x5c>
 8006434:	4629      	mov	r1, r5
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f93a 	bl	80066b0 <__swsetup_r>
 800643c:	b170      	cbz	r0, 800645c <_vfiprintf_r+0x5c>
 800643e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006440:	07dc      	lsls	r4, r3, #31
 8006442:	d504      	bpl.n	800644e <_vfiprintf_r+0x4e>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006448:	b01d      	add	sp, #116	; 0x74
 800644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	0598      	lsls	r0, r3, #22
 8006452:	d4f7      	bmi.n	8006444 <_vfiprintf_r+0x44>
 8006454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006456:	f7fe f9cf 	bl	80047f8 <__retarget_lock_release_recursive>
 800645a:	e7f3      	b.n	8006444 <_vfiprintf_r+0x44>
 800645c:	2300      	movs	r3, #0
 800645e:	9309      	str	r3, [sp, #36]	; 0x24
 8006460:	2320      	movs	r3, #32
 8006462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006466:	f8cd 800c 	str.w	r8, [sp, #12]
 800646a:	2330      	movs	r3, #48	; 0x30
 800646c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006620 <_vfiprintf_r+0x220>
 8006470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006474:	f04f 0901 	mov.w	r9, #1
 8006478:	4623      	mov	r3, r4
 800647a:	469a      	mov	sl, r3
 800647c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006480:	b10a      	cbz	r2, 8006486 <_vfiprintf_r+0x86>
 8006482:	2a25      	cmp	r2, #37	; 0x25
 8006484:	d1f9      	bne.n	800647a <_vfiprintf_r+0x7a>
 8006486:	ebba 0b04 	subs.w	fp, sl, r4
 800648a:	d00b      	beq.n	80064a4 <_vfiprintf_r+0xa4>
 800648c:	465b      	mov	r3, fp
 800648e:	4622      	mov	r2, r4
 8006490:	4629      	mov	r1, r5
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ffa2 	bl	80063dc <__sfputs_r>
 8006498:	3001      	adds	r0, #1
 800649a:	f000 80a9 	beq.w	80065f0 <_vfiprintf_r+0x1f0>
 800649e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a0:	445a      	add	r2, fp
 80064a2:	9209      	str	r2, [sp, #36]	; 0x24
 80064a4:	f89a 3000 	ldrb.w	r3, [sl]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80a1 	beq.w	80065f0 <_vfiprintf_r+0x1f0>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b8:	f10a 0a01 	add.w	sl, sl, #1
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	9307      	str	r3, [sp, #28]
 80064c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c4:	931a      	str	r3, [sp, #104]	; 0x68
 80064c6:	4654      	mov	r4, sl
 80064c8:	2205      	movs	r2, #5
 80064ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ce:	4854      	ldr	r0, [pc, #336]	; (8006620 <_vfiprintf_r+0x220>)
 80064d0:	f7f9 fe7e 	bl	80001d0 <memchr>
 80064d4:	9a04      	ldr	r2, [sp, #16]
 80064d6:	b9d8      	cbnz	r0, 8006510 <_vfiprintf_r+0x110>
 80064d8:	06d1      	lsls	r1, r2, #27
 80064da:	bf44      	itt	mi
 80064dc:	2320      	movmi	r3, #32
 80064de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e2:	0713      	lsls	r3, r2, #28
 80064e4:	bf44      	itt	mi
 80064e6:	232b      	movmi	r3, #43	; 0x2b
 80064e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b2a      	cmp	r3, #42	; 0x2a
 80064f2:	d015      	beq.n	8006520 <_vfiprintf_r+0x120>
 80064f4:	9a07      	ldr	r2, [sp, #28]
 80064f6:	4654      	mov	r4, sl
 80064f8:	2000      	movs	r0, #0
 80064fa:	f04f 0c0a 	mov.w	ip, #10
 80064fe:	4621      	mov	r1, r4
 8006500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006504:	3b30      	subs	r3, #48	; 0x30
 8006506:	2b09      	cmp	r3, #9
 8006508:	d94d      	bls.n	80065a6 <_vfiprintf_r+0x1a6>
 800650a:	b1b0      	cbz	r0, 800653a <_vfiprintf_r+0x13a>
 800650c:	9207      	str	r2, [sp, #28]
 800650e:	e014      	b.n	800653a <_vfiprintf_r+0x13a>
 8006510:	eba0 0308 	sub.w	r3, r0, r8
 8006514:	fa09 f303 	lsl.w	r3, r9, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	46a2      	mov	sl, r4
 800651e:	e7d2      	b.n	80064c6 <_vfiprintf_r+0xc6>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	1d19      	adds	r1, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	9103      	str	r1, [sp, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	bfbb      	ittet	lt
 800652c:	425b      	neglt	r3, r3
 800652e:	f042 0202 	orrlt.w	r2, r2, #2
 8006532:	9307      	strge	r3, [sp, #28]
 8006534:	9307      	strlt	r3, [sp, #28]
 8006536:	bfb8      	it	lt
 8006538:	9204      	strlt	r2, [sp, #16]
 800653a:	7823      	ldrb	r3, [r4, #0]
 800653c:	2b2e      	cmp	r3, #46	; 0x2e
 800653e:	d10c      	bne.n	800655a <_vfiprintf_r+0x15a>
 8006540:	7863      	ldrb	r3, [r4, #1]
 8006542:	2b2a      	cmp	r3, #42	; 0x2a
 8006544:	d134      	bne.n	80065b0 <_vfiprintf_r+0x1b0>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	1d1a      	adds	r2, r3, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	9203      	str	r2, [sp, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfb8      	it	lt
 8006552:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006556:	3402      	adds	r4, #2
 8006558:	9305      	str	r3, [sp, #20]
 800655a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006630 <_vfiprintf_r+0x230>
 800655e:	7821      	ldrb	r1, [r4, #0]
 8006560:	2203      	movs	r2, #3
 8006562:	4650      	mov	r0, sl
 8006564:	f7f9 fe34 	bl	80001d0 <memchr>
 8006568:	b138      	cbz	r0, 800657a <_vfiprintf_r+0x17a>
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	eba0 000a 	sub.w	r0, r0, sl
 8006570:	2240      	movs	r2, #64	; 0x40
 8006572:	4082      	lsls	r2, r0
 8006574:	4313      	orrs	r3, r2
 8006576:	3401      	adds	r4, #1
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4829      	ldr	r0, [pc, #164]	; (8006624 <_vfiprintf_r+0x224>)
 8006580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006584:	2206      	movs	r2, #6
 8006586:	f7f9 fe23 	bl	80001d0 <memchr>
 800658a:	2800      	cmp	r0, #0
 800658c:	d03f      	beq.n	800660e <_vfiprintf_r+0x20e>
 800658e:	4b26      	ldr	r3, [pc, #152]	; (8006628 <_vfiprintf_r+0x228>)
 8006590:	bb1b      	cbnz	r3, 80065da <_vfiprintf_r+0x1da>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	3307      	adds	r3, #7
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	3308      	adds	r3, #8
 800659c:	9303      	str	r3, [sp, #12]
 800659e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a0:	443b      	add	r3, r7
 80065a2:	9309      	str	r3, [sp, #36]	; 0x24
 80065a4:	e768      	b.n	8006478 <_vfiprintf_r+0x78>
 80065a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065aa:	460c      	mov	r4, r1
 80065ac:	2001      	movs	r0, #1
 80065ae:	e7a6      	b.n	80064fe <_vfiprintf_r+0xfe>
 80065b0:	2300      	movs	r3, #0
 80065b2:	3401      	adds	r4, #1
 80065b4:	9305      	str	r3, [sp, #20]
 80065b6:	4619      	mov	r1, r3
 80065b8:	f04f 0c0a 	mov.w	ip, #10
 80065bc:	4620      	mov	r0, r4
 80065be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c2:	3a30      	subs	r2, #48	; 0x30
 80065c4:	2a09      	cmp	r2, #9
 80065c6:	d903      	bls.n	80065d0 <_vfiprintf_r+0x1d0>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0c6      	beq.n	800655a <_vfiprintf_r+0x15a>
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	e7c4      	b.n	800655a <_vfiprintf_r+0x15a>
 80065d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d4:	4604      	mov	r4, r0
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7f0      	b.n	80065bc <_vfiprintf_r+0x1bc>
 80065da:	ab03      	add	r3, sp, #12
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	462a      	mov	r2, r5
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <_vfiprintf_r+0x22c>)
 80065e2:	a904      	add	r1, sp, #16
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7fd fb9d 	bl	8003d24 <_printf_float>
 80065ea:	4607      	mov	r7, r0
 80065ec:	1c78      	adds	r0, r7, #1
 80065ee:	d1d6      	bne.n	800659e <_vfiprintf_r+0x19e>
 80065f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_vfiprintf_r+0x202>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	059a      	lsls	r2, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_vfiprintf_r+0x202>
 80065fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065fe:	f7fe f8fb 	bl	80047f8 <__retarget_lock_release_recursive>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	065b      	lsls	r3, r3, #25
 8006606:	f53f af1d 	bmi.w	8006444 <_vfiprintf_r+0x44>
 800660a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800660c:	e71c      	b.n	8006448 <_vfiprintf_r+0x48>
 800660e:	ab03      	add	r3, sp, #12
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	462a      	mov	r2, r5
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <_vfiprintf_r+0x22c>)
 8006616:	a904      	add	r1, sp, #16
 8006618:	4630      	mov	r0, r6
 800661a:	f7fd fe27 	bl	800426c <_printf_i>
 800661e:	e7e4      	b.n	80065ea <_vfiprintf_r+0x1ea>
 8006620:	08006b6c 	.word	0x08006b6c
 8006624:	08006b76 	.word	0x08006b76
 8006628:	08003d25 	.word	0x08003d25
 800662c:	080063dd 	.word	0x080063dd
 8006630:	08006b72 	.word	0x08006b72

08006634 <__swbuf_r>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	460e      	mov	r6, r1
 8006638:	4614      	mov	r4, r2
 800663a:	4605      	mov	r5, r0
 800663c:	b118      	cbz	r0, 8006646 <__swbuf_r+0x12>
 800663e:	6a03      	ldr	r3, [r0, #32]
 8006640:	b90b      	cbnz	r3, 8006646 <__swbuf_r+0x12>
 8006642:	f7fd ffc1 	bl	80045c8 <__sinit>
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	071a      	lsls	r2, r3, #28
 800664e:	d525      	bpl.n	800669c <__swbuf_r+0x68>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b31b      	cbz	r3, 800669c <__swbuf_r+0x68>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6922      	ldr	r2, [r4, #16]
 8006658:	1a98      	subs	r0, r3, r2
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc04      	bgt.n	800666e <__swbuf_r+0x3a>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f7ff fd9e 	bl	80061a8 <_fflush_r>
 800666c:	b9e0      	cbnz	r0, 80066a8 <__swbuf_r+0x74>
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	3b01      	subs	r3, #1
 8006672:	60a3      	str	r3, [r4, #8]
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	701e      	strb	r6, [r3, #0]
 800667c:	6962      	ldr	r2, [r4, #20]
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	429a      	cmp	r2, r3
 8006682:	d004      	beq.n	800668e <__swbuf_r+0x5a>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	07db      	lsls	r3, r3, #31
 8006688:	d506      	bpl.n	8006698 <__swbuf_r+0x64>
 800668a:	2e0a      	cmp	r6, #10
 800668c:	d104      	bne.n	8006698 <__swbuf_r+0x64>
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fd89 	bl	80061a8 <_fflush_r>
 8006696:	b938      	cbnz	r0, 80066a8 <__swbuf_r+0x74>
 8006698:	4638      	mov	r0, r7
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 f806 	bl	80066b0 <__swsetup_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d0d5      	beq.n	8006654 <__swbuf_r+0x20>
 80066a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066ac:	e7f4      	b.n	8006698 <__swbuf_r+0x64>
	...

080066b0 <__swsetup_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <__swsetup_r+0xac>)
 80066b4:	4605      	mov	r5, r0
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	460c      	mov	r4, r1
 80066ba:	b118      	cbz	r0, 80066c4 <__swsetup_r+0x14>
 80066bc:	6a03      	ldr	r3, [r0, #32]
 80066be:	b90b      	cbnz	r3, 80066c4 <__swsetup_r+0x14>
 80066c0:	f7fd ff82 	bl	80045c8 <__sinit>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ca:	0718      	lsls	r0, r3, #28
 80066cc:	d422      	bmi.n	8006714 <__swsetup_r+0x64>
 80066ce:	06d9      	lsls	r1, r3, #27
 80066d0:	d407      	bmi.n	80066e2 <__swsetup_r+0x32>
 80066d2:	2309      	movs	r3, #9
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e0:	e034      	b.n	800674c <__swsetup_r+0x9c>
 80066e2:	0758      	lsls	r0, r3, #29
 80066e4:	d512      	bpl.n	800670c <__swsetup_r+0x5c>
 80066e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e8:	b141      	cbz	r1, 80066fc <__swsetup_r+0x4c>
 80066ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d002      	beq.n	80066f8 <__swsetup_r+0x48>
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7fe fefe 	bl	80054f4 <_free_r>
 80066f8:	2300      	movs	r3, #0
 80066fa:	6363      	str	r3, [r4, #52]	; 0x34
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	2300      	movs	r3, #0
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f043 0308 	orr.w	r3, r3, #8
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	b94b      	cbnz	r3, 800672c <__swsetup_r+0x7c>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800671e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006722:	d003      	beq.n	800672c <__swsetup_r+0x7c>
 8006724:	4621      	mov	r1, r4
 8006726:	4628      	mov	r0, r5
 8006728:	f000 f884 	bl	8006834 <__smakebuf_r>
 800672c:	89a0      	ldrh	r0, [r4, #12]
 800672e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006732:	f010 0301 	ands.w	r3, r0, #1
 8006736:	d00a      	beq.n	800674e <__swsetup_r+0x9e>
 8006738:	2300      	movs	r3, #0
 800673a:	60a3      	str	r3, [r4, #8]
 800673c:	6963      	ldr	r3, [r4, #20]
 800673e:	425b      	negs	r3, r3
 8006740:	61a3      	str	r3, [r4, #24]
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	b943      	cbnz	r3, 8006758 <__swsetup_r+0xa8>
 8006746:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800674a:	d1c4      	bne.n	80066d6 <__swsetup_r+0x26>
 800674c:	bd38      	pop	{r3, r4, r5, pc}
 800674e:	0781      	lsls	r1, r0, #30
 8006750:	bf58      	it	pl
 8006752:	6963      	ldrpl	r3, [r4, #20]
 8006754:	60a3      	str	r3, [r4, #8]
 8006756:	e7f4      	b.n	8006742 <__swsetup_r+0x92>
 8006758:	2000      	movs	r0, #0
 800675a:	e7f7      	b.n	800674c <__swsetup_r+0x9c>
 800675c:	20000064 	.word	0x20000064

08006760 <_raise_r>:
 8006760:	291f      	cmp	r1, #31
 8006762:	b538      	push	{r3, r4, r5, lr}
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	d904      	bls.n	8006774 <_raise_r+0x14>
 800676a:	2316      	movs	r3, #22
 800676c:	6003      	str	r3, [r0, #0]
 800676e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006776:	b112      	cbz	r2, 800677e <_raise_r+0x1e>
 8006778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800677c:	b94b      	cbnz	r3, 8006792 <_raise_r+0x32>
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f830 	bl	80067e4 <_getpid_r>
 8006784:	462a      	mov	r2, r5
 8006786:	4601      	mov	r1, r0
 8006788:	4620      	mov	r0, r4
 800678a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678e:	f000 b817 	b.w	80067c0 <_kill_r>
 8006792:	2b01      	cmp	r3, #1
 8006794:	d00a      	beq.n	80067ac <_raise_r+0x4c>
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	d103      	bne.n	80067a2 <_raise_r+0x42>
 800679a:	2316      	movs	r3, #22
 800679c:	6003      	str	r3, [r0, #0]
 800679e:	2001      	movs	r0, #1
 80067a0:	e7e7      	b.n	8006772 <_raise_r+0x12>
 80067a2:	2400      	movs	r4, #0
 80067a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067a8:	4628      	mov	r0, r5
 80067aa:	4798      	blx	r3
 80067ac:	2000      	movs	r0, #0
 80067ae:	e7e0      	b.n	8006772 <_raise_r+0x12>

080067b0 <raise>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <raise+0xc>)
 80067b2:	4601      	mov	r1, r0
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f7ff bfd3 	b.w	8006760 <_raise_r>
 80067ba:	bf00      	nop
 80067bc:	20000064 	.word	0x20000064

080067c0 <_kill_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d07      	ldr	r5, [pc, #28]	; (80067e0 <_kill_r+0x20>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	f7fa ff59 	bl	8001684 <_kill>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d102      	bne.n	80067dc <_kill_r+0x1c>
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	b103      	cbz	r3, 80067dc <_kill_r+0x1c>
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	2000046c 	.word	0x2000046c

080067e4 <_getpid_r>:
 80067e4:	f7fa bf46 	b.w	8001674 <_getpid>

080067e8 <__swhatbuf_r>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	460c      	mov	r4, r1
 80067ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f0:	2900      	cmp	r1, #0
 80067f2:	b096      	sub	sp, #88	; 0x58
 80067f4:	4615      	mov	r5, r2
 80067f6:	461e      	mov	r6, r3
 80067f8:	da0d      	bge.n	8006816 <__swhatbuf_r+0x2e>
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	bf0c      	ite	eq
 8006806:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800680a:	2340      	movne	r3, #64	; 0x40
 800680c:	2000      	movs	r0, #0
 800680e:	6031      	str	r1, [r6, #0]
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	b016      	add	sp, #88	; 0x58
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	466a      	mov	r2, sp
 8006818:	f000 f848 	bl	80068ac <_fstat_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	dbec      	blt.n	80067fa <__swhatbuf_r+0x12>
 8006820:	9901      	ldr	r1, [sp, #4]
 8006822:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006826:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800682a:	4259      	negs	r1, r3
 800682c:	4159      	adcs	r1, r3
 800682e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006832:	e7eb      	b.n	800680c <__swhatbuf_r+0x24>

08006834 <__smakebuf_r>:
 8006834:	898b      	ldrh	r3, [r1, #12]
 8006836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006838:	079d      	lsls	r5, r3, #30
 800683a:	4606      	mov	r6, r0
 800683c:	460c      	mov	r4, r1
 800683e:	d507      	bpl.n	8006850 <__smakebuf_r+0x1c>
 8006840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	2301      	movs	r3, #1
 800684a:	6163      	str	r3, [r4, #20]
 800684c:	b002      	add	sp, #8
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	ab01      	add	r3, sp, #4
 8006852:	466a      	mov	r2, sp
 8006854:	f7ff ffc8 	bl	80067e8 <__swhatbuf_r>
 8006858:	9900      	ldr	r1, [sp, #0]
 800685a:	4605      	mov	r5, r0
 800685c:	4630      	mov	r0, r6
 800685e:	f7fe febd 	bl	80055dc <_malloc_r>
 8006862:	b948      	cbnz	r0, 8006878 <__smakebuf_r+0x44>
 8006864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006868:	059a      	lsls	r2, r3, #22
 800686a:	d4ef      	bmi.n	800684c <__smakebuf_r+0x18>
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	f043 0302 	orr.w	r3, r3, #2
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	e7e3      	b.n	8006840 <__smakebuf_r+0xc>
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	6020      	str	r0, [r4, #0]
 800687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	9b00      	ldr	r3, [sp, #0]
 8006884:	6163      	str	r3, [r4, #20]
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	6120      	str	r0, [r4, #16]
 800688a:	b15b      	cbz	r3, 80068a4 <__smakebuf_r+0x70>
 800688c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006890:	4630      	mov	r0, r6
 8006892:	f000 f81d 	bl	80068d0 <_isatty_r>
 8006896:	b128      	cbz	r0, 80068a4 <__smakebuf_r+0x70>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	431d      	orrs	r5, r3
 80068a8:	81a5      	strh	r5, [r4, #12]
 80068aa:	e7cf      	b.n	800684c <__smakebuf_r+0x18>

080068ac <_fstat_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d07      	ldr	r5, [pc, #28]	; (80068cc <_fstat_r+0x20>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	f7fa ff42 	bl	8001742 <_fstat>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d102      	bne.n	80068c8 <_fstat_r+0x1c>
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	b103      	cbz	r3, 80068c8 <_fstat_r+0x1c>
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	2000046c 	.word	0x2000046c

080068d0 <_isatty_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4d06      	ldr	r5, [pc, #24]	; (80068ec <_isatty_r+0x1c>)
 80068d4:	2300      	movs	r3, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fa ff41 	bl	8001762 <_isatty>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_isatty_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_isatty_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	2000046c 	.word	0x2000046c

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
